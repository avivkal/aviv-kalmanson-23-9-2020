{"version":3,"sources":["Components/NavigationBar/NavigationBar.js","App.js","Components/ErrorBoundary/ErrorBoundary.js","index.js","Store/actionTypes.js","UtilityFunctions/functions.js","Store/Actions/actions.js","Constants/const.js","Store/Reducers/homeReducer.js","Store/Reducers/favoritesReducer.js","Store/Reducers/modalReducer.js","Store/Reducers/loadingReducer.js","Store/store.js","Store/Actions/modalActions.js","Store/Actions/homeActions.js","UtilityFunctions/localStorageFunctions.js"],"names":["NavigationBar","toggleHandle","newUnit","currentNewTemp","newFavorites","unit","props","CELSIUS","FAHRENHEIT","convertCelsiusToFahrenheit","current","currentTemp","convertFavoritesToFahrenheit","convertFahrenheitToCelsius","convertFavoritesToCelsius","existsInFavorites","favorites","toggle","convertTemp","fiveDaysForecast","updateFavorites","Navbar","collapseOnSelect","expand","bg","this","darkMode","variant","Brand","as","Link","to","HOME_PATH","Button","style","backgroundColor","border","onClick","className","marginLeft","toggleDarkMode","Toggle","aria-controls","Collapse","id","Nav","FAVORITES_PATH","Component","connect","state","home","darkmode","dispatch","newTemp","fiveDays","homeActions","generalActions","Home","React","lazy","Favorites","localStorage","setItem","App","fallback","Spinner","animation","path","exact","component","ErrorBoundary","hasError","error","info","setState","toString","children","axios","defaults","baseURL","ReactDOM","render","store","document","getElementById","actionTypes","SET_CURRENT_CITY_DETAILS","TOGGLE","UPDATE_FORECAST","ADD_TO_FAVORITES","SET_FAVORITE_CITY_DETAILS","FIRST_TIME_FINISHED","CLEAR","REMOVE_FROM_FAVORITES","TOGGLE_DARK_MODE","CLOSE_MODAL","OPEN_MODAL","UPDATE_FAVORITES","FIRST_TIME_FINISHED_FAVORITES","LOADING","FINISHED_LOADING","celsius","toFixed","fahrenheit","findKeyByName","name","searchText","city","find","text","undefined","key","x","Array","isArray","length","favorite","arr","arrayExists","map","Temperature","Minimum","Unit","Value","Maximum","JSON","parse","getItem","currentFavorite","convertIconPath","icon","clear","type","setFavorites","loading","finishedLoading","ICON_PATH_1","ICON_PATH_2","API_PATH","DAYS","DEFAULT_CITY_KEY","DEFAULT_CITY_NAME","DARK","LIGHT","initialState","darkModeText","homeReducer","action","cityKey","cityName","currentStateOfWeather","payload","firstTimeFavorites","favoritesReducer","modalTitle","modalText","show","modalReducer","title","loadingReducer","rootReducer","combineReducers","modal","createStore","applyMiddleware","thunk","closeModal","openModal","setCurrentCityDetails","data","getState","WeatherIcon","Math","floor","Metric","Imperial","WeatherText","DailyForecasts","firstLoad","a","all","get","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","response","submit","Key","EnglishName","enableHighAccuracy","timeout","maximumAge","body","getFavorites","stringify"],"mappings":"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","file":"static/js/main.7c33aeb0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../App.scss';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as homeActions from '../../Store/Actions/homeActions'\r\nimport { existsInFavorites, convertFavoritesToCelsius, convertFavoritesToFahrenheit, convertFahrenheitToCelsius, convertCelsiusToFahrenheit, convertTemp } from '../../UtilityFunctions/functions';\r\nimport { HOME_PATH, FAVORITES_PATH, CELSIUS, FAHRENHEIT } from '../../Constants/const'\r\n\r\n\r\nclass NavigationBar extends Component {\r\n    toggleHandle = () => {\r\n\r\n        const unit = this.props.unit;\r\n        let newUnit, currentNewTemp, newFavorites;\r\n        if (unit === CELSIUS) {\r\n            newUnit = FAHRENHEIT;\r\n            currentNewTemp = convertCelsiusToFahrenheit(this.props.current.currentTemp);\r\n            newFavorites = convertFavoritesToFahrenheit();\r\n        }\r\n        else {\r\n            newUnit = CELSIUS;\r\n            currentNewTemp = convertFahrenheitToCelsius(this.props.current.currentTemp);\r\n            newFavorites = convertFavoritesToCelsius();\r\n        }\r\n\r\n        if (!existsInFavorites(this.props.favorites, this.props.current)) {\r\n            this.props.toggle(\r\n                currentNewTemp,\r\n                newUnit,\r\n                convertTemp(this.props.current.fiveDaysForecast, unit)\r\n            );\r\n        }\r\n        this.props.updateFavorites(newFavorites);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Navbar collapseOnSelect expand=\"lg\" bg={this.props.darkMode ? \"light\" : \"dark\"} variant={this.props.darkMode ? \"light\" : \"dark\"} >\r\n                <Navbar.Brand as={Link} to={HOME_PATH}>Herolo Weather Task</Navbar.Brand>\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40' }}\r\n                    onClick={() => { this.toggleHandle() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    <span className={this.props.unit === CELSIUS ? 'active' : null}>°C </span>\r\n                    <span>/</span>\r\n                    <span className={this.props.unit === FAHRENHEIT ? 'active' : null}> °F</span>\r\n                </Button>\r\n\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40', marginLeft: '10px' }}\r\n                    onClick={() => { this.props.toggleDarkMode() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    Dark Mode\r\n                </Button>\r\n\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link as={Link} to={HOME_PATH}>Home</Nav.Link>\r\n                        <Nav.Link as={Link} to={FAVORITES_PATH}>\r\n                            Favorites </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggle: (newTemp, newUnit, fiveDays) => dispatch(homeActions.toggle(newTemp, newUnit, fiveDays)),\r\n        toggleDarkMode: () => dispatch(homeActions.toggleDarkMode()),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        darkMode: state.home.darkmode,\r\n        unit: state.home.unit,\r\n        current: state.home.current,\r\n        favorites: state.favorites.favorites\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar);\r\n\r\n","import React, { Component, Suspense } from 'react';\r\nimport './App.scss';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport NavigationBar from './Components/NavigationBar/NavigationBar'\r\nimport { HOME_PATH, FAVORITES_PATH } from './Constants/const'\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nconst Home = React.lazy(()=> import('./Components/Home/Home'));\r\nconst Favorites = React.lazy(()=> import('./Components/Favorites/Favorites'));\r\nlocalStorage.setItem('firstTime', true);\r\nlocalStorage.setItem('firstTimeFavorites', true);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <BrowserRouter>\r\n          <NavigationBar />\r\n          <Suspense fallback={<Spinner animation=\"border\" className=\"spinner\" />}>\r\n          <Switch>\r\n            <Route path={HOME_PATH} exact component={Home} />\r\n            <Route path={FAVORITES_PATH} exact component={Favorites} />\r\n          </Switch>\r\n            </Suspense>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n      error: null,\r\n    };\r\n  }\r\n\r\n    componentDidCatch(error, info) {\r\n      this.setState({\r\n        hasError: true,\r\n        error: error,\r\n      });\r\n    }\r\n\r\n    \r\n  \r\n\r\n    render() {\r\n      if (this.state.hasError) {\r\n        return <h1>Something went wrong. {this.state.error.toString()}</h1>; \r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { store } from './Store/store'\nimport axios from 'axios'\nimport ErrorBoundary from './Components/ErrorBoundary/ErrorBoundary';\n\naxios.defaults.baseURL = 'https://dataservice.accuweather.com/';\n\nReactDOM.render(\n  <ErrorBoundary>\n  <Provider store={store}>\n    <App />\n  </Provider> \n  </ErrorBoundary>,\n  document.getElementById('root')\n);\n","export const actionTypes = {\r\n    SET_CURRENT_CITY_DETAILS: 'SET_CURRENT_CITY_DETAILS',\r\n    TOGGLE: 'TOGGLE',\r\n    UPDATE_FORECAST: 'UPDATE_FORECAST',\r\n    ADD_TO_FAVORITES: 'ADD_TO_FAVORITES',\r\n    SET_FAVORITE_CITY_DETAILS: 'SET_FAVORITE_CITY_DETAILS',\r\n    FIRST_TIME_FINISHED: 'FIRST_TIME_FINISHED',\r\n    CLEAR: 'CLEAR',\r\n    REMOVE_FROM_FAVORITES: 'REMOVE_FROM_FAVORITES',\r\n    TOGGLE_DARK_MODE: 'TOGGLE_DARK_MODE',\r\n    CLOSE_MODAL: 'CLOSE_MODAL',\r\n    OPEN_MODAL: 'OPEN_MODAL',\r\n    UPDATE_FAVORITES: 'UPDATE_FAVORITES',\r\n    FIRST_TIME_FINISHED_FAVORITES: 'FIRST_TIME_FINISHED_FAVORITES',\r\n    LOADING: 'LOADING',\r\n    FINISHED_LOADING: 'FINISHED_LOADING'\r\n};\r\n\r\n","import { CELSIUS, FAHRENHEIT } from \"../Constants/const\";\r\n\r\nconst convertCelsiusToFahrenheit = (celsius) => {\r\n    let fahrenheit = (celsius * 1.8) + 32;\r\n    return fahrenheit.toFixed(1);\r\n}\r\n\r\nconst convertFahrenheitToCelsius = (fahrenheit) => {\r\n    let celsius = (fahrenheit - 32) / 1.8;\r\n    return celsius.toFixed(1);\r\n}\r\n\r\nconst findKeyByName = (name, searchText) => {\r\n    const city = searchText.find(current => current.text === name);\r\n    if (city === undefined) //if clicked on the enter key\r\n        return searchText[0].key;\r\n    return city.key; //if clicked on a city with the mouse\r\n}\r\n\r\nconst existsInFavorites = (x, favorites) => {\r\n    if (!(Array.isArray(favorites) && favorites.length))\r\n        return false;\r\n    const found = favorites.find(favorite => x.key === favorite.key);\r\n    return found !== undefined;\r\n}\r\n\r\nconst convertTemp = (arr) => {\r\n    if (arrayExists(arr)) {\r\n        arr.map((current) => {\r\n            if(current.Temperature.Minimum.Unit === FAHRENHEIT){\r\n                current.Temperature.Minimum.Value = convertFahrenheitToCelsius(current.Temperature.Minimum.Value);\r\n                current.Temperature.Maximum.Value = convertFahrenheitToCelsius(current.Temperature.Maximum.Value);\r\n                current.Temperature.Minimum.Unit = CELSIUS;\r\n                current.Temperature.Maximum.Unit = CELSIUS;\r\n            }\r\n            else{\r\n                current.Temperature.Minimum.Value = convertCelsiusToFahrenheit(current.Temperature.Minimum.Value);\r\n                current.Temperature.Maximum.Value = convertCelsiusToFahrenheit(current.Temperature.Maximum.Value);\r\n                current.Temperature.Minimum.Unit = FAHRENHEIT;\r\n                current.Temperature.Maximum.Unit = FAHRENHEIT;\r\n            }\r\n            \r\n            return current;\r\n        });\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst convertFavoritesToCelsius = () => {\r\n    const favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    if(arrayExists(favorites)){\r\n        favorites.map(currentFavorite => {\r\n            currentFavorite.currentTemp = convertFahrenheitToCelsius(currentFavorite.currentTemp);\r\n            currentFavorite.fiveDaysForecast = convertTemp(currentFavorite.fiveDaysForecast);\r\n            return currentFavorite;\r\n        });\r\n    }\r\n\r\n    return favorites;\r\n\r\n}\r\n\r\nconst convertFavoritesToFahrenheit = () => {\r\n    const favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    if(arrayExists(favorites)){\r\n        favorites.map(currentFavorite => {\r\n            currentFavorite.currentTemp = convertCelsiusToFahrenheit(currentFavorite.currentTemp);\r\n            currentFavorite.fiveDaysForecast = convertTemp(currentFavorite.fiveDaysForecast);\r\n            return currentFavorite;\r\n        });\r\n    }\r\n    return favorites;\r\n}\r\n\r\n\r\nconst convertIconPath = (icon) => {\r\n    //example: 1 => 01\r\n    if (icon < 10) {\r\n        return '0' + icon;\r\n    }\r\n    return icon;\r\n}\r\n\r\n\r\nconst arrayExists = (arr) => {\r\n    return arr !== undefined && arr !== null && arr.length > 0;\r\n}\r\nexport {\r\n    convertCelsiusToFahrenheit,\r\n    convertFahrenheitToCelsius,\r\n    existsInFavorites,\r\n    findKeyByName,\r\n    convertTemp,\r\n    convertFavoritesToCelsius,\r\n    convertFavoritesToFahrenheit,\r\n    convertIconPath,\r\n    arrayExists\r\n}\r\n\r\n","import { actionTypes } from '../actionTypes'\r\nimport { setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\n\r\nconst clear = () => {\r\n    return {\r\n        type: actionTypes.CLEAR,\r\n    }\r\n}\r\n\r\nconst updateFavorites = (favorites) => {\r\n    setFavorites(favorites);\r\n    return {\r\n        type: actionTypes.UPDATE_FAVORITES,\r\n        favorites\r\n    }\r\n}\r\n\r\nconst loading = () => {\r\n    return{\r\n        type: actionTypes.LOADING\r\n    }\r\n}\r\n\r\nconst finishedLoading = () => {\r\n    return{\r\n        type: actionTypes.FINISHED_LOADING\r\n    }\r\n}\r\n\r\nexport {\r\n    clear,\r\n    updateFavorites,\r\n    loading,\r\n    finishedLoading\r\n}","export const ICON_PATH_1 = 'https://www.accuweather.com/images/weathericons/';\r\nexport const ICON_PATH_2 = '.svg';\r\nexport const API_PATH = '?apikey=eubH33xl3udPrlkaN4qNXhTGkbkYhpWD';\r\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nexport const DEFAULT_CITY_KEY = '215854';\r\nexport const DEFAULT_CITY_NAME = 'Tel Aviv';\r\nexport const HOME_PATH = '/aviv-kalmanson-23-9-2020';\r\nexport const FAVORITES_PATH = '/aviv-kalmanson-23-9-2020/favorites';\r\nexport const DARK = 'dark';\r\nexport const LIGHT = 'light';\r\nexport const CELSIUS = 'C';\r\nexport const FAHRENHEIT = 'F';","import {CELSIUS, DARK, LIGHT} from '../../Constants/const'\r\n\r\nconst initialState = {\r\n    current: {}, \r\n    unit: CELSIUS,\r\n    darkmode: false,\r\n    darkModeText: LIGHT\r\n}\r\n\r\n\r\nconst homeReducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'SET_CURRENT_CITY_DETAILS': \r\n            return {\r\n                ...state,\r\n                current: {\r\n                    key: action.cityKey,\r\n                    cityName: action.cityName,\r\n                    currentTemp: action.currentTemp,\r\n                    currentStateOfWeather: action.currentStateOfWeather,\r\n                    fiveDaysForecast: action.fiveDaysForecast,\r\n                    icon: action.icon\r\n                },\r\n\r\n            }\r\n\r\n\r\n        case 'SET_FAVORITE_CITY_DETAILS': \r\n            return {\r\n                ...state,\r\n                current: { ...action.payload },\r\n            }\r\n\r\n        case 'TOGGLE': \r\n            return {\r\n                ...state,\r\n                unit: action.unit,\r\n                current: {\r\n                    ...state.current,\r\n                    currentTemp: action.currentTemp,\r\n                    fiveDaysForecast: action.fiveDaysForecast\r\n                }\r\n            }\r\n\r\n        case 'TOGGLE_DARK_MODE': \r\n            return{\r\n                ...state,\r\n                darkmode: !state.darkmode,\r\n                darkModeText: state.darkModeText===LIGHT ? DARK : LIGHT\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default homeReducer;","const initialState = {\r\n    firstTimeFavorites: true,\r\n    favorites: [], \r\n}\r\n\r\n\r\nconst favoritesReducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'REMOVE_FROM_FAVORITES': \r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n\r\n        case 'ADD_TO_FAVORITES': \r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n            \r\n        case 'UPDATE_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default favoritesReducer;","const initialState = {\r\n    modalTitle: '', \r\n    modalText: '',\r\n    show: false\r\n}\r\n\r\n\r\nconst modalReducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'CLOSE_MODAL': \r\n            return {\r\n                ...state,\r\n                show: false\r\n            }\r\n        case 'OPEN_MODAL': \r\n            return {\r\n                ...state,\r\n                show: true,\r\n                modalTitle: action.title,\r\n                modalText: action.text\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default modalReducer;","const initialState = {\r\n    loading: false\r\n}\r\n\r\nconst loadingReducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'LOADING': \r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case 'FINISHED_LOADING': \r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loadingReducer;\r\n\r\n","import homeReducer from './Reducers/homeReducer'\r\nimport favoritesReducer from './Reducers/favoritesReducer'\r\nimport modalReducer from './Reducers/modalReducer'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport loadingReducer from './Reducers/loadingReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    home: homeReducer,\r\n    favorites: favoritesReducer,\r\n    modal: modalReducer,\r\n    loading: loadingReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n","import { actionTypes } from '../actionTypes'\r\n\r\nconst closeModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_MODAL,\r\n    }\r\n}\r\n\r\nconst openModal = (title, text) => {\r\n    return {\r\n        type: actionTypes.OPEN_MODAL,\r\n        title,\r\n        text\r\n    }\r\n}\r\n\r\nexport{\r\n    closeModal,\r\n    openModal\r\n}","import { actionTypes } from '../actionTypes'\r\nimport { store } from '../store'\r\nimport { convertTemp } from '../../UtilityFunctions/functions'\r\nimport axios from 'axios'\r\nimport { API_PATH, CELSIUS, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME, LIGHT } from '../../Constants/const'\r\nimport { clear, loading, finishedLoading } from './actions'\r\nimport { openModal } from './modalActions'\r\n\r\nconst setCurrentCityDetails = (data, cityKey, cityName) => {\r\n    const unit = store.getState().home.unit;\r\n    const icon = data[1].data[0].WeatherIcon < 10 ? '0' + data[1].data[0].WeatherIcon : data[1].data[0].WeatherIcon;\r\n    const currentTemp = unit === CELSIUS ? Math.floor(data[1].data[0].Temperature.Metric.Value) : Math.floor(data[1].data[0].Temperature.Imperial.Value);\r\n    const currentStateOfWeather = data[1].data[0].WeatherText;\r\n    const fiveDaysForecast = unit === CELSIUS ? convertTemp(data[0].data.DailyForecasts) : data[0].data.DailyForecasts;\r\n\r\n    return {\r\n        type: actionTypes.SET_CURRENT_CITY_DETAILS,\r\n        data,\r\n        cityKey,\r\n        cityName,\r\n        icon,\r\n        currentTemp,\r\n        currentStateOfWeather,\r\n        fiveDaysForecast\r\n    }\r\n}\r\n\r\nconst firstLoad = () => async dispatch => { //get first data = Tel Aviv/Current location\r\n    try{\r\n        dispatch(loading());\r\n        const data = await axios.all([axios.get('forecasts/v1/daily/5day/' + DEFAULT_CITY_KEY + API_PATH),\r\n        axios.get('currentconditions/v1/' + DEFAULT_CITY_KEY + API_PATH)]);\r\n        dispatch(setCurrentCityDetails(data, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME));\r\n        navigator.geolocation.getCurrentPosition(async (pos) => { //if success\r\n            let crd = pos.coords;\r\n            const response = await axios.get(`locations/v1/cities/geoposition/search${API_PATH}&q=${crd.latitude}%2C${crd.longitude}`);\r\n            dispatch(submit(response.data.Key, response.data.EnglishName));\r\n        },\r\n            //if error\r\n            () => { dispatch(openModal('Note', 'Access denied to your location! No worries, we will use Tel Aviv as default.')); },\r\n            { //settings\r\n                enableHighAccuracy: true,\r\n                timeout: 5000,\r\n                maximumAge: 0\r\n            });\r\n    }\r\n    catch(error){\r\n        dispatch(openModal('Error', error.toString()));\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n\r\n}\r\n\r\nconst submit = (cityKey, cityName) => async dispatch => {\r\n    try{\r\n        dispatch(loading());\r\n        const data = await axios.all([axios.get('forecasts/v1/daily/5day/' + cityKey + API_PATH),\r\n        axios.get('currentconditions/v1/' + cityKey + API_PATH)]);    \r\n        dispatch(setCurrentCityDetails(data, cityKey, cityName));\r\n        dispatch(clear());\r\n    }\r\n    catch(errors){\r\n        dispatch(openModal('Error', errors.toString()));\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n}\r\n\r\nconst toggle = (newTemp, newUnit, fiveDays) => {\r\n    return {\r\n        type: actionTypes.TOGGLE,\r\n        unit: newUnit,\r\n        currentTemp: newTemp,\r\n        fiveDaysForecast: fiveDays\r\n    }\r\n}\r\n\r\nconst toggleDarkMode = () => {\r\n    if(store.getState().home.darkModeText === LIGHT){ //change the body background color\r\n        document.body.style.backgroundColor = \"#343A40\";\r\n    }\r\n    else{\r\n        document.body.style.backgroundColor = \"white\";\r\n    }\r\n    return {\r\n        type: actionTypes.TOGGLE_DARK_MODE,\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    setCurrentCityDetails,\r\n    submit,\r\n    firstLoad,\r\n    toggle,\r\n    toggleDarkMode\r\n}\r\n\r\n","const getFavorites = () => {\r\n    return JSON.parse(localStorage.getItem('favorites'));\r\n}\r\n\r\nconst setFavorites = (favorites) => {\r\n    localStorage.setItem('favorites', JSON.stringify(favorites));\r\n}\r\n\r\nexport{\r\n    getFavorites,\r\n    setFavorites\r\n}"],"sourceRoot":""}