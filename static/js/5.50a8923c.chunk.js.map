{"version":3,"sources":["Store/Actions/favoritesActions.js","Components/Card/card.js","Components/FavoriteCard/favoriteCard.js","Components/CardsList/cardsList.js","Components/Modal/customModal.js","Components/Jumbotron/jumbotronContent.js","Components/Home/Home.js"],"names":["setFavoriteCityDetails","payload","type","actionTypes","SET_FAVORITE_CITY_DETAILS","firstTimeFinishedFavorites","FIRST_TIME_FINISHED_FAVORITES","firstLoadFavorites","dispatch","a","loading","oldFavorites","getFavorites","requests","arrayExists","favorite","push","axios","all","get","key","API_PATH","unit","store","getState","home","response","i","length","fiveDaysForecast","CELSIUS","convertTemp","data","DailyForecasts","currentStateOfWeather","WeatherText","currentTemp","Math","floor","Temperature","Metric","Value","Imperial","icon","WeatherIcon","updateFavorites","openModal","toString","finishedLoading","removeFromFavorites","newFavList","favorites","filter","city","setFavorites","REMOVE_FROM_FAVORITES","addToFavorites","current","newFav","concat","ADD_TO_FAVORITES","card","props","today","index","currentDay","Card","className","Body","Title","DAYS","Minimum","Maximum","src","ICON_PATH_1","convertIconPath","Day","Icon","ICON_PATH_2","alt","Night","favoriteCard","currentFavorite","cityName","click","onClick","as","NavLink","CardsList","isFav","map","darkModeText","Date","CustomModal","Modal","show","onHide","closeModal","Header","closeButton","modalTitle","modalText","Footer","Button","variant","jumbotronContent","undefined","Jumbotron","Row","Col","md","span","offset","existsInFavorites","getDay","Home","state","searchText","searchArr","changeHandler","event","setState","target","value","arr","Key","text","LocalizedName","AdministrativeArea","Country","ID","addToFavoritesHandler","changeHandlerDelay","debounce","Image","this","firstTime","firstLoad","Spinner","animation","Dropdown","button","floating","labeled","options","search","placeholder","onSearchChange","persist","onChange","submit","findKeyByName","currentTarget","textContent","split","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","Component","connect","modal","favoriteActions","firstTimeFinished","homeActions","clearText","generalActions","modalActions","title","cityKey"],"mappings":"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","file":"static/js/5.50a8923c.chunk.js","sourcesContent":["import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { getFavorites, setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport { arrayExists, convertTemp } from '../../UtilityFunctions/functions'\r\nimport { API_PATH, CELSIUS } from '../../Constants/const'\r\nimport { updateFavorites,loading, finishedLoading } from './actions'\r\nimport { store } from '../store'\r\nimport {openModal} from '../Actions/modalActions'\r\n\r\n\r\nconst setFavoriteCityDetails = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_FAVORITE_CITY_DETAILS,\r\n        payload\r\n    }\r\n}\r\n\r\nconst firstTimeFinishedFavorites = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED_FAVORITES,\r\n    }\r\n}\r\n\r\nconst firstLoadFavorites = () => async dispatch => {\r\n    try{\r\n        dispatch(loading());\r\n        const oldFavorites = getFavorites();\r\n        let requests = [];\r\n        if(arrayExists(oldFavorites)){\r\n            for (const favorite of oldFavorites) {\r\n                requests.push(\r\n                    axios.all([axios.get('forecasts/v1/daily/5day/' + favorite.key + API_PATH),\r\n                    axios.get('currentconditions/v1/' + favorite.key + API_PATH)])\r\n                )\r\n            }\r\n            const unit = store.getState().home.unit;\r\n            const response = await axios.all(requests);\r\n    \r\n                for (let i = 0; i < response.length; i++) {\r\n                    oldFavorites[i].fiveDaysForecast = unit === CELSIUS ? convertTemp(response[i][0].data.DailyForecasts) : response[i][0].data.DailyForecasts;\r\n                    oldFavorites[i].currentStateOfWeather = response[i][1].data[0].WeatherText;\r\n                    oldFavorites[i].currentTemp = unit === CELSIUS ? Math.floor(response[i][1].data[0].Temperature.Metric.Value) : Math.floor(response[i][1].data[0].Temperature.Imperial.Value);\r\n                    oldFavorites[i].icon = response[i][1].data[0].WeatherIcon < 10 ? '0' + response[i][1].data[0].WeatherIcon : response[i][1].data[0].WeatherIcon;\r\n                }\r\n                dispatch(updateFavorites(oldFavorites));\r\n                dispatch(firstTimeFinishedFavorites());\r\n        }\r\n    }\r\n    catch(error){\r\n        dispatch(openModal('Error', error.toString()));\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n    \r\n}\r\n\r\nconst removeFromFavorites = (key) => {\r\n    const favoriteCities = store.getState().favorites.favorites;\r\n    const newFavList = favoriteCities.filter(city => city.key !== key);\r\n    setFavorites(newFavList);\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_FAVORITES,\r\n        favorites: newFavList\r\n    }\r\n}\r\nconst addToFavorites = () => {\r\n    const favorites = getFavorites();\r\n    const current = store.getState().home.current;\r\n    let newFav = [];\r\n    if (!arrayExists(favorites)) {\r\n        newFav.push(current);\r\n    }\r\n    else {\r\n        newFav = favorites.concat(current);\r\n    }\r\n    setFavorites(newFav);\r\n    return {\r\n        type: actionTypes.ADD_TO_FAVORITES,\r\n        favorites: newFav\r\n    }\r\n}\r\n\r\nexport {\r\n    setFavoriteCityDetails,\r\n    firstTimeFinishedFavorites,\r\n    firstLoadFavorites,\r\n    addToFavorites,\r\n    removeFromFavorites\r\n}","import React from 'react';\r\nimport { DAYS } from '../../Constants/const';\r\nimport { Card } from 'react-bootstrap';\r\nimport './card.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport { convertIconPath } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst card = (props) => {\r\n    const {today,index,currentDay,unit} = props;\r\n    return (\r\n        <Card className=\"col-xl-2 cards-style\">\r\n            <Card.Body>\r\n                <Card.Title className=\"cards-title\">{DAYS[(today + index) % 7]}</Card.Title>\r\n                <div className=\"cards-text card-margin\">\r\n                    {currentDay.Temperature.Minimum.Value}  - {currentDay.Temperature.Maximum.Value} °{unit}\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                        <span className=\"d-flex justify-content-start span-width\">Day:</span>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${convertIconPath(currentDay.Day.Icon)}${ICON_PATH_2}`} alt=\"weather icon day\"></img>\r\n                    </div>\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                    <span className=\"d-flex justify-content-start span-width\">Night:</span>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${convertIconPath(currentDay.Night.Icon)}${ICON_PATH_2}`} alt=\"weather icon night\"></img>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\ncard.propTypes = {\r\n    currentDay: propTypes.object,\r\n    unit: propTypes.string,\r\n    index: propTypes.number,\r\n    today: propTypes.number \r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport { Card, NavLink } from 'react-bootstrap';\r\nimport './favoriteCard.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\n\r\nconst favoriteCard = (props) => {\r\n    const {currentTemp,cityName,currentStateOfWeather, icon} = props.currentFavorite;\r\n    const {click,unit} = props;\r\n    return(\r\n        <Card className=\"col-lg-2 favorites-cards\" onClick={click} as={NavLink}>\r\n                <Card.Body>\r\n                    <Card.Title className=\"cards-text\">{cityName}</Card.Title>\r\n                    <div className=\"cards-text\">\r\n                        {currentTemp} °{unit}\r\n                        <div className=\"current-state\" >\r\n                            {currentStateOfWeather}\r\n                        </div>\r\n                        <div className=\"image\">\r\n                            <img className=\"icons-images\" src={`${ICON_PATH_1}${icon}${ICON_PATH_2}`} alt=\"weather icon day\"></img>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n    );\r\n}\r\n\r\n\r\nfavoriteCard.propTypes = {\r\n    currentFavorite: propTypes.object,\r\n    unit: propTypes.string,\r\n    click: propTypes.func,\r\n}\r\n\r\nexport default favoriteCard;","import React from 'react'\r\nimport Card from '../Card/card'\r\nimport FavoriteCard from '../FavoriteCard/favoriteCard'\r\nimport './cardsList.scss'\r\nimport { arrayExists } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst CardsList = (props) => {\r\n    const {favorites,click,today,current, unit} = props;\r\n    if (props.isFav) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {arrayExists(favorites) ? favorites.map(currentFavorite => {\r\n                        return <FavoriteCard\r\n                            key={currentFavorite.key}\r\n                            currentFavorite={currentFavorite}\r\n                            click={() => click(currentFavorite)}\r\n                            currentTemp={currentFavorite.currentTemp}\r\n                            unit={unit}/>\r\n                    }) : <h1 className={`text-${props.darkModeText}-mode-active no-favorites-h1`}>You don't have any favorites currently</h1>}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {arrayExists(current.fiveDaysForecast) && current.fiveDaysForecast.map((currentDay, index) => {\r\n                return <Card currentDay={currentDay}\r\n                    today={today}\r\n                    index={index}\r\n                    unit={unit}\r\n                    key={currentDay.Date}\r\n                    />\r\n            }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nCardsList.propTypes = {\r\n    unit: propTypes.string,\r\n    current: propTypes.object,\r\n    favorites: propTypes.array,\r\n    click: propTypes.func,\r\n    darkModeText: propTypes.string,\r\n    isFav: propTypes.bool,\r\n    today: propTypes.number\r\n}\r\n\r\nexport default CardsList;\r\n","import React from 'react'\r\nimport propTypes from 'prop-types';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst CustomModal = (props) => {\r\n    return (\r\n        <Modal show={props.show} onHide={props.closeModal}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>{props.modalText}</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.closeModal}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n}\r\n\r\nCustomModal.propTypes = {\r\n    modalTitle: propTypes.string,\r\n    modalText: propTypes.string,\r\n    closeModal: propTypes.func,\r\n    show: propTypes.bool,\r\n}\r\n\r\nexport default CustomModal;","import React from 'react';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const';\r\nimport { BsHeartFill, BsHeart } from 'react-icons/bs';\r\nimport { Button, Jumbotron, Row, Col } from 'react-bootstrap';\r\nimport CardsList from '../CardsList/cardsList';\r\nimport { existsInFavorites } from '../../UtilityFunctions/functions'\r\nimport './Jumbotron.scss'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\n\r\nconst jumbotronContent = (props) => {\r\n    const {darkModeText,current,favorites,click,unit} = props;\r\n    if(current.icon === undefined){\r\n        return(<div></div>)\r\n    }\r\n    return (\r\n        <Jumbotron className={`jumbotron-${darkModeText} container fluid`}>\r\n            <Row className=\"show-grid\">\r\n                <Col md={{ span: 6, offset: 3 }} className=\"justify-content-center\">\r\n                    <section >\r\n                        <h2 className=\"city-details\">{current.cityName}</h2>\r\n                        <h2 className=\"city-details\">{current.currentTemp} °{unit}</h2>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${current.icon}${ICON_PATH_2}`} alt=\"weather icon\"></img>\r\n                    </section>                        </Col>\r\n                <Col md={3} className=\"d-flex justify-content-center\">\r\n                    <section>\r\n                        {existsInFavorites(current, favorites) ? <BsHeartFill className=\"icons\" onClick={click}/>  : <BsHeart className=\"icons\" onClick={click}/>}\r\n                        <Button variant=\"dark\" className=\"add-to-favorites\" onClick={click}>{existsInFavorites(current, favorites) ? 'Remove from favorites' : 'Add to favorites'}</Button>\r\n                    </section>\r\n                </Col>\r\n            </Row>\r\n            <h1 className=\"dark-text state-of-weather\">{current.currentStateOfWeather}</h1>\r\n            <div className=\"cards-list-home\">\r\n                <CardsList\r\n                    current={current}\r\n                    today={new Date().getDay()}\r\n                    unit={unit}\r\n                    isFav={false}\r\n                />\r\n\r\n            </div>\r\n\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\njumbotronContent.propTypes = {\r\n    unit: propTypes.string,\r\n    current: propTypes.object,\r\n    favorites: propTypes.array,\r\n    click: propTypes.func,\r\n    darkModeText: propTypes.string\r\n}\r\n\r\nexport default jumbotronContent;\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport './home.scss';\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as homeActions from '../../Store/Actions/homeActions'\r\nimport * as favoriteActions from '../../Store/Actions/favoritesActions'\r\nimport * as modalActions from '../../Store/Actions/modalActions'\r\nimport { convertIconPath, existsInFavorites, findKeyByName } from '../../UtilityFunctions/functions'\r\nimport { getFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport CustomModal from '../Modal/customModal'\r\nimport JumbotronContent from '../Jumbotron/jumbotronContent'\r\nimport {debounce} from 'lodash';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport axios from 'axios'\r\nimport { API_PATH } from '../../Constants/const'\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    state={\r\n        searchText: '', \r\n        searchArr: [], \r\n    }\r\n   \r\n    componentDidMount() {\r\n        for(let i = 1; i<=44; i++){\r\n            if(i!==9 && i!==10 && i!==27 && i!==28){\r\n                let img = new Image();\r\n                img.src = \"https://www.accuweather.com/images/weathericons/\" + convertIconPath(i) + \".svg\";        \r\n            }\r\n        }\r\n        const oldFavorites = getFavorites();\r\n        this.props.updateFavorites(oldFavorites);\r\n        if (this.props.firstTime) {  \r\n            this.props.firstLoad();\r\n        }\r\n        \r\n    }\r\n    \r\n    changeHandler = async (event) => {\r\n        try{\r\n            this.setState({searchText: event.target.value})\r\n            const response =  await axios.get('locations/v1/cities/autocomplete' + API_PATH + '&q=' + event.target.value)    \r\n            let arr = [];\r\n            for (let i = 0; i < response.data.length; i++) {\r\n                arr[i] = {\r\n                    key: response.data[i].Key,\r\n                    text: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n                    value: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n        \r\n                }\r\n            }\r\n            this.setState({searchArr: arr})\r\n        }\r\n        catch(error){\r\n            this.props.openModal('Error', error.toString());\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addToFavoritesHandler = () => {\r\n        if (!existsInFavorites(this.props.current, this.props.favorites)) {  \r\n            this.props.addToFavorites();\r\n        }\r\n        else {\r\n            this.props.removeFromFavorites(this.props.current.key);\r\n        }\r\n    }\r\n\r\n    changeHandlerDelay = debounce(event => {\r\n        this.changeHandler(event);\r\n    },500);\r\n    \r\n    render() {\r\n        if(this.props.loading){\r\n            return(\r\n                <Spinner animation=\"border\" className=\"spinner\"/>\r\n            );\r\n        }\r\n        return (\r\n            <div className={this.props.darkModeText}>\r\n\r\n                <section className=\"search\">\r\n                    <Dropdown\r\n                        className='icon search-dropdown-style'\r\n                        icon='world'\r\n                        button\r\n                        floating\r\n                        labeled\r\n                        options={this.state.searchArr}\r\n                        search\r\n                        placeholder=\"Enter City\"\r\n                        onSearchChange={(event)=> {\r\n                            event.persist();\r\n                            this.changeHandlerDelay(event)}}\r\n                        onChange={(event) => { this.props.submit(findKeyByName(event.currentTarget.textContent, this.state.searchArr), event.currentTarget.textContent.split(',')[0]) }}\r\n                    />\r\n                </section>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <JumbotronContent\r\n                        unit={this.props.unit}\r\n                        current={this.props.current}\r\n                        favorites={this.props.favorites}\r\n                        click={this.addToFavoritesHandler}\r\n                        darkModeText={this.props.darkModeText}\r\n                    />\r\n\r\n                </CSSTransitionGroup>\r\n\r\n\r\n                <CustomModal\r\n                    modalTitle={this.props.modalTitle}\r\n                    modalText={this.props.modalText}\r\n                    closeModal={this.props.closeModal}\r\n                    show={this.props.show}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {current,firstTime, unit,darkModeText} = state.home; \r\n    const {modalTitle, modalText, show} = state.modal;\r\n    // const {searchArr} = state.search;\r\n    const {favorites} = state.favorites;\r\n    const {loading} = state.loading;\r\n    return {\r\n        favorites,\r\n        current,\r\n        firstTime,\r\n        show,\r\n        modalText,\r\n        modalTitle,\r\n        // searchArr,\r\n        unit,\r\n        darkModeText,\r\n        loading\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addToFavorites: () => dispatch(favoriteActions.addToFavorites()),\r\n        firstTimeFinished: () => dispatch(homeActions.firstTimeFinished()),\r\n        clearText: () => dispatch(generalActions.clear()),\r\n        removeFromFavorites: (key) => dispatch(favoriteActions.removeFromFavorites(key)),\r\n        closeModal: () => dispatch(modalActions.closeModal()),\r\n        openModal: (title, text) => dispatch(modalActions.openModal(title, text)),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n        submit: (cityKey, cityName) => dispatch(homeActions.submit(cityKey, cityName)),\r\n        firstLoad: () => dispatch(homeActions.firstLoad()),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"],"sourceRoot":""}