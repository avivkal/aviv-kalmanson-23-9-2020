{"version":3,"sources":["Store/Actions/favoritesActions.js","Components/Card/card.js","Components/FavoriteCard/favoriteCard.js","Components/CardsList/cardsList.js","Components/Favorites/Favorites.js"],"names":["setFavoriteCityDetails","payload","type","actionTypes","SET_FAVORITE_CITY_DETAILS","firstTimeFinishedFavorites","FIRST_TIME_FINISHED_FAVORITES","firstLoadFavorites","dispatch","a","loading","oldFavorites","getFavorites","requests","arrayExists","favorite","push","axios","all","get","key","API_PATH","unit","store","getState","home","response","i","length","fiveDaysForecast","CELSIUS","convertTemp","data","DailyForecasts","currentStateOfWeather","WeatherText","currentTemp","Math","floor","Temperature","Metric","Value","Imperial","icon","WeatherIcon","updateFavorites","openModal","toString","finishedLoading","removeFromFavorites","newFavList","favorites","filter","city","setFavorites","REMOVE_FROM_FAVORITES","addToFavorites","current","newFav","concat","ADD_TO_FAVORITES","card","props","today","index","currentDay","Card","className","Body","Title","DAYS","Minimum","Maximum","src","ICON_PATH_1","convertIconPath","Day","Icon","ICON_PATH_2","alt","Night","favoriteCard","currentFavorite","cityName","click","onClick","as","NavLink","CardsList","isFav","map","darkModeText","Date","Favorites","handleClickOnCard","clickedFavorite","history","HOME_PATH","clearText","this","firstTimeFavorites","animation","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","Component","connect","state","favoritesActions","generalActions"],"mappings":"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","file":"static/js/6.5c67004d.chunk.js","sourcesContent":["import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { getFavorites, setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport { arrayExists, convertTemp } from '../../UtilityFunctions/functions'\r\nimport { API_PATH, CELSIUS } from '../../Constants/const'\r\nimport { updateFavorites,loading, finishedLoading } from './actions'\r\nimport { store } from '../store'\r\nimport {openModal} from '../Actions/modalActions'\r\n\r\n\r\nconst setFavoriteCityDetails = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_FAVORITE_CITY_DETAILS,\r\n        payload\r\n    }\r\n}\r\n\r\nconst firstTimeFinishedFavorites = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED_FAVORITES,\r\n    }\r\n}\r\n\r\nconst firstLoadFavorites = () => async dispatch => {\r\n    try{\r\n        dispatch(loading());\r\n        const oldFavorites = getFavorites();\r\n        let requests = [];\r\n        if(arrayExists(oldFavorites)){\r\n            for (const favorite of oldFavorites) {\r\n                requests.push(\r\n                    axios.all([axios.get('forecasts/v1/daily/5day/' + favorite.key + API_PATH),\r\n                    axios.get('currentconditions/v1/' + favorite.key + API_PATH)])\r\n                )\r\n            }\r\n            const unit = store.getState().home.unit;\r\n            const response = await axios.all(requests);\r\n    \r\n                for (let i = 0; i < response.length; i++) {\r\n                    oldFavorites[i].fiveDaysForecast = unit === CELSIUS ? convertTemp(response[i][0].data.DailyForecasts) : response[i][0].data.DailyForecasts;\r\n                    oldFavorites[i].currentStateOfWeather = response[i][1].data[0].WeatherText;\r\n                    oldFavorites[i].currentTemp = unit === CELSIUS ? Math.floor(response[i][1].data[0].Temperature.Metric.Value) : Math.floor(response[i][1].data[0].Temperature.Imperial.Value);\r\n                    oldFavorites[i].icon = response[i][1].data[0].WeatherIcon < 10 ? '0' + response[i][1].data[0].WeatherIcon : response[i][1].data[0].WeatherIcon;\r\n                }\r\n                dispatch(updateFavorites(oldFavorites));\r\n                dispatch(firstTimeFinishedFavorites());\r\n        }\r\n    }\r\n    catch(error){\r\n        dispatch(openModal('Error', error.toString()));\r\n    }\r\n    finally{\r\n        dispatch(finishedLoading());\r\n    }\r\n    \r\n}\r\n\r\nconst removeFromFavorites = (key) => {\r\n    const favoriteCities = store.getState().favorites.favorites;\r\n    const newFavList = favoriteCities.filter(city => city.key !== key);\r\n    setFavorites(newFavList);\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_FAVORITES,\r\n        favorites: newFavList\r\n    }\r\n}\r\nconst addToFavorites = () => {\r\n    const favorites = getFavorites();\r\n    const current = store.getState().home.current;\r\n    let newFav = [];\r\n    if (!arrayExists(favorites)) {\r\n        newFav.push(current);\r\n    }\r\n    else {\r\n        newFav = favorites.concat(current);\r\n    }\r\n    setFavorites(newFav);\r\n    return {\r\n        type: actionTypes.ADD_TO_FAVORITES,\r\n        favorites: newFav\r\n    }\r\n}\r\n\r\nexport {\r\n    setFavoriteCityDetails,\r\n    firstTimeFinishedFavorites,\r\n    firstLoadFavorites,\r\n    addToFavorites,\r\n    removeFromFavorites\r\n}","import React from 'react';\r\nimport { DAYS } from '../../Constants/const';\r\nimport { Card } from 'react-bootstrap';\r\nimport './card.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport { convertIconPath } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst card = (props) => {\r\n    const {today,index,currentDay,unit} = props;\r\n    return (\r\n        <Card className=\"col-xl-2 cards-style\">\r\n            <Card.Body>\r\n                <Card.Title className=\"cards-title\">{DAYS[(today + index) % 7]}</Card.Title>\r\n                <div className=\"cards-text card-margin\">\r\n                    {currentDay.Temperature.Minimum.Value}  - {currentDay.Temperature.Maximum.Value} Â°{unit}\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                        <span className=\"d-flex justify-content-start span-width\">Day:</span>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${convertIconPath(currentDay.Day.Icon)}${ICON_PATH_2}`} alt=\"weather icon day\"></img>\r\n                    </div>\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                    <span className=\"d-flex justify-content-start span-width\">Night:</span>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${convertIconPath(currentDay.Night.Icon)}${ICON_PATH_2}`} alt=\"weather icon night\"></img>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\ncard.propTypes = {\r\n    currentDay: propTypes.object,\r\n    unit: propTypes.string,\r\n    index: propTypes.number,\r\n    today: propTypes.number \r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport { Card, NavLink } from 'react-bootstrap';\r\nimport './favoriteCard.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\n\r\nconst favoriteCard = (props) => {\r\n    const {currentTemp,cityName,currentStateOfWeather, icon} = props.currentFavorite;\r\n    const {click,unit} = props;\r\n    return(\r\n        <Card className=\"col-lg-2 favorites-cards\" onClick={click} as={NavLink}>\r\n                <Card.Body>\r\n                    <Card.Title className=\"cards-text\">{cityName}</Card.Title>\r\n                    <div className=\"cards-text\">\r\n                        {currentTemp} Â°{unit}\r\n                        <div className=\"current-state\" >\r\n                            {currentStateOfWeather}\r\n                        </div>\r\n                        <div className=\"image\">\r\n                            <img className=\"icons-images\" src={`${ICON_PATH_1}${icon}${ICON_PATH_2}`} alt=\"weather icon day\"></img>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n    );\r\n}\r\n\r\n\r\nfavoriteCard.propTypes = {\r\n    currentFavorite: propTypes.object,\r\n    unit: propTypes.string,\r\n    click: propTypes.func,\r\n}\r\n\r\nexport default favoriteCard;","import React from 'react'\r\nimport Card from '../Card/card'\r\nimport FavoriteCard from '../FavoriteCard/favoriteCard'\r\nimport './cardsList.scss'\r\nimport { arrayExists } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst CardsList = (props) => {\r\n    const {favorites,click,today,current, unit} = props;\r\n    if (props.isFav) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {arrayExists(favorites) ? favorites.map(currentFavorite => {\r\n                        return <FavoriteCard\r\n                            key={currentFavorite.key}\r\n                            currentFavorite={currentFavorite}\r\n                            click={() => click(currentFavorite)}\r\n                            currentTemp={currentFavorite.currentTemp}\r\n                            unit={unit}/>\r\n                    }) : <h1 className={`text-${props.darkModeText}-mode-active no-favorites-h1`}>You don't have any favorites currently</h1>}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {arrayExists(current.fiveDaysForecast) && current.fiveDaysForecast.map((currentDay, index) => {\r\n                return <Card currentDay={currentDay}\r\n                    today={today}\r\n                    index={index}\r\n                    unit={unit}\r\n                    key={currentDay.Date}\r\n                    />\r\n            }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nCardsList.propTypes = {\r\n    unit: propTypes.string,\r\n    current: propTypes.object,\r\n    favorites: propTypes.array,\r\n    click: propTypes.func,\r\n    darkModeText: propTypes.string,\r\n    isFav: propTypes.bool,\r\n    today: propTypes.number\r\n}\r\n\r\nexport default CardsList;\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../../App.scss'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as favoritesActions from '../../Store/Actions/favoritesActions'\r\nimport CardsList from '../CardsList/cardsList'\r\nimport { HOME_PATH } from '../../Constants/const'\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\nclass Favorites extends Component {\r\n\r\n    componentDidMount() {\r\n        if (this.props.firstTimeFavorites) {\r\n            this.props.firstLoadFavorites();\r\n        }\r\n    }\r\n\r\n    handleClickOnCard = (clickedFavorite) => {\r\n        this.props.history.push(HOME_PATH);\r\n        this.props.clearText();\r\n        this.props.setFavoriteCityDetails(clickedFavorite);\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.props.loading){\r\n            return(\r\n                <Spinner animation=\"border\" className=\"spinner\" />\r\n            );\r\n        }\r\n        return (\r\n            <div className={this.props.darkModeText}>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <CardsList\r\n                        click={(currentFavorite) => this.handleClickOnCard(currentFavorite)}\r\n                        unit={this.props.unit}\r\n                        favorites={this.props.favorites}\r\n                        darkModeText={this.props.darkModeText}\r\n                        isFav={true}\r\n                    />\r\n                </CSSTransitionGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favorites: state.favorites.favorites,\r\n        current: state.home.current,\r\n        unit: state.home.unit,\r\n        firstTimeFavorites: state.favorites.firstTimeFavorites,\r\n        darkModeText: state.home.darkModeText,\r\n        loading: state.loading.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setFavoriteCityDetails: (clickedFavorite) => dispatch(favoritesActions.setFavoriteCityDetails(clickedFavorite)),\r\n        clearText: () => dispatch(generalActions.clear()),\r\n        firstTimeFinishedFavorites: () => dispatch(favoritesActions.firstTimeFinishedFavorites()),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n        firstLoadFavorites: () => dispatch(favoritesActions.firstLoadFavorites())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);"],"sourceRoot":""}