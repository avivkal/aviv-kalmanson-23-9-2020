{"version":3,"sources":["Store/actionTypes.js","UtilityFunctions/localStorageFunctions.js","Store/Actions/actions.js","Store/Reducers/reducer.js","Store/store.js","UtilityFunctions/functions.js","Constants/const.js","Store/Actions/homeActions.js","Components/Modal/customModal.js","Components/Card/card.js","Components/CardsList/cardsList.js","Components/Jumbotron/jumbotronContent.js","Components/Home/Home.js","Store/Actions/favoritesActions.js","Components/Favorites/Favorites.js","Components/NavigationBar/NavigationBar.js","Store/Actions/navigationBarActions.js","App.js","index.js"],"names":["actionTypes","getFavorites","JSON","parse","localStorage","getItem","setFavorites","favorites","setItem","stringify","clear","type","updateFavorites","initialState","current","searchText","searchArr","unit","firstTime","firstTimeFavorites","darkmode","show","modalTitle","modalText","darkModeText","reducer","state","action","val","arr","key","cityKey","cityName","currentTemp","currentStateOfWeather","fiveDaysForecast","icon","payload","Object","assign","title","text","store","createStore","applyMiddleware","thunk","convertCelsiusToFahrenheit","celsius","toFixed","convertFahrenheitToCelsius","fahrenheit","existsInFavorites","x","Array","isArray","length","undefined","find","favorite","forLoopconvertFahrenheitToCelsius","arrayExists","map","Temperature","Minimum","Value","Maximum","Unit","forLoopconvertCelsiusToFahrenheit","convertTemp","currentUnit","newArr","convertFavoritesToCelsius","currentFavorite","convertFavoritesToFahrenheit","convertIconPath","ICON_PATH_1","API_PATH","DAYS","HOME_PATH","updateText","updateSearch","setCurrentCityDetails","data","getState","WeatherIcon","Math","floor","Metric","Imperial","WeatherText","DailyForecasts","firstTimeFinished","openModal","submit","dispatch","axios","all","get","then","catch","errors","toString","customModal","props","Modal","onHide","closeModal","Header","closeButton","Title","Body","Footer","Button","variant","onClick","card","isFav","Card","className","click","as","NavLink","src","alt","today","index","currentDay","Day","Icon","Night","cardsList","Date","jumbotronContent","Jumbotron","Row","Col","xs","getDay","Home","addToFavoritesHandler","removeFromFavorites","addToFavorites","oldFavorites","this","first","firstLoad","Dropdown","button","floating","labeled","options","search","placeholder","onSearchChange","event","changeHandler","onChange","name","city","findKeyByName","currentTarget","textContent","split","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","Component","connect","darkMode","homeActions","updateForecast","newFav","concat","push","clearText","generalActions","newFavList","filter","target","value","response","i","Key","LocalizedName","AdministrativeArea","Country","ID","error","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","EnglishName","enableHighAccuracy","timeout","maximumAge","firstTimeFinishedFavorites","Favorites","handleClickOnCard","clickedFavorite","history","setFavoriteCityDetails","firstLoadFavorites","favoritesActions","requests","NavigationBar","toggleHandle","newUnit","currentNewTemp","newFavorites","toggle","Navbar","collapseOnSelect","expand","bg","Brand","Link","to","style","backgroundColor","border","marginLeft","toggleDarkMode","Toggle","aria-controls","Collapse","id","Nav","newTemp","fiveDays","navigationBarActions","App","path","exact","component","defaults","baseURL","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5aaa9980.chunk.js","sourcesContent":["export const actionTypes = {\r\n    UPDATE_TEXT: 'UPDATE_TEXT',\r\n    UPDATE_SEARCH: 'UPDATE_SEARCH',\r\n    SET_CURRENT_CITY_DETAILS: 'SET_CURRENT_CITY_DETAILS',\r\n    TOGGLE: 'TOGGLE',\r\n    UPDATE_FORECAST: 'UPDATE_FORECAST',\r\n    ADD_TO_FAVORITES: 'ADD_TO_FAVORITES',\r\n    SET_FAVORITE_CITY_DETAILS: 'SET_FAVORITE_CITY_DETAILS',\r\n    FIRST_TIME_FINISHED: 'FIRST_TIME_FINISHED',\r\n    CLEAR: 'CLEAR',\r\n    REMOVE_FROM_FAVORITES: 'REMOVE_FROM_FAVORITES',\r\n    TOGGLE_DARK_MODE: 'TOGGLE_DARK_MODE',\r\n    CLOSE_MODAL: 'CLOSE_MODAL',\r\n    OPEN_MODAL: 'OPEN_MODAL',\r\n    UPDATE_FAVORITES: 'UPDATE_FAVORITES',\r\n    FIRST_TIME_FINISHED_FAVORITES: 'FIRST_TIME_FINISHED_FAVORITES',\r\n};\r\n\r\n","const getFavorites = () => {\r\n    return JSON.parse(localStorage.getItem('favorites'));\r\n}\r\n\r\nconst setFavorites = (favorites) => {\r\n    localStorage.setItem('favorites', JSON.stringify(favorites));\r\n}\r\n\r\nexport{\r\n    getFavorites,\r\n    setFavorites\r\n}","import { actionTypes } from '../actionTypes'\r\nimport { setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\n\r\nconst clear = () => {\r\n    return {\r\n        type: actionTypes.CLEAR,\r\n    }\r\n}\r\n\r\nconst updateFavorites = (favorites) => {\r\n    setFavorites(favorites);\r\n    return {\r\n        type: actionTypes.UPDATE_FAVORITES,\r\n        favorites\r\n    }\r\n}\r\n\r\nexport {\r\n    clear,\r\n    updateFavorites,\r\n}","const initialState = {\r\n    favorites: [],\r\n    current: {},\r\n    searchText: '',\r\n    searchArr: [],\r\n    unit: 'C',\r\n    firstTime: true,\r\n    firstTimeFavorites: true,\r\n    darkmode: false,\r\n    show: false,\r\n    modalTitle: '',\r\n    modalText: '',\r\n    darkModeText: 'light'\r\n}\r\n\r\nconst reducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'UPDATE_TEXT': \r\n            return {\r\n                ...state,\r\n                searchText: action.val\r\n            }\r\n        case 'UPDATE_SEARCH':\r\n            return {\r\n                ...state,\r\n                searchArr: action.arr\r\n            }\r\n        case 'SET_CURRENT_CITY_DETAILS':\r\n            return {\r\n                ...state,\r\n                current: {\r\n                    key: action.cityKey,\r\n                    cityName: action.cityName,\r\n                    currentTemp: action.currentTemp,\r\n                    currentStateOfWeather: action.currentStateOfWeather,\r\n                    fiveDaysForecast: action.fiveDaysForecast,\r\n                    icon: action.icon\r\n                },\r\n\r\n            }\r\n        case 'TOGGLE':\r\n            return {\r\n                ...state,\r\n                unit: action.unit,\r\n                current: {\r\n                    ...state.current,\r\n                    currentTemp: action.currentTemp,\r\n                    fiveDaysForecast: action.fiveDaysForecast\r\n                }\r\n            }\r\n        case 'UPDATE_FORECAST':\r\n            return {\r\n                ...state,\r\n                fiveDaysForecast: action.arr\r\n            }\r\n        case 'ADD_TO_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n\r\n        case 'SET_FAVORITE_CITY_DETAILS':\r\n            return {\r\n                ...state,\r\n                current: { ...action.payload }\r\n            }\r\n        case 'FIRST_TIME_FINISHED':\r\n            return {\r\n                ...state,\r\n                firstTime: false\r\n            }\r\n        case 'CLEAR':\r\n            return {\r\n                ...state,\r\n                searchArr: [],\r\n                searchText: ''\r\n            }\r\n        case 'REMOVE_FROM_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n        case 'TOGGLE_DARK_MODE':\r\n            return Object.assign({}, state, {\r\n                darkmode: !state.darkmode,\r\n                darkModeText: state.darkModeText==='light' ? 'dark' : 'light'\r\n            });\r\n        case 'CLOSE_MODAL':\r\n            return {\r\n                ...state,\r\n                show: false\r\n            }\r\n        case 'OPEN_MODAL':\r\n            return {\r\n                ...state,\r\n                show: true,\r\n                modalTitle: action.title,\r\n                modalText: action.text\r\n            }\r\n\r\n        case 'UPDATE_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n\r\n        case 'FIRST_TIME_FINISHED_FAVORITES':\r\n            return {\r\n                ...state,\r\n                firstTimeFavorites: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import reducer from './Reducers/reducer'\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk'\r\n\r\nexport const store = createStore(reducer,applyMiddleware(thunk));\r\n","const convertCelsiusToFahrenheit = (celsius) => {\r\n    let fahrenheit = (celsius * 1.8) + 32;\r\n    return fahrenheit.toFixed(1);\r\n}\r\n\r\nconst convertFahrenheitToCelsius = (fahrenheit) => {\r\n    let celsius = (fahrenheit - 32) / 1.8;\r\n    return celsius.toFixed(1);\r\n}\r\n\r\nconst findKeyByName = (name, searchText) => {\r\n    const city = searchText.find(current => current.text === name);\r\n    if (city === undefined) //if clicked on the enter key\r\n        return searchText[0].key;\r\n    return city.key; //if clicked on a city with the mouse\r\n}\r\n\r\nconst existsInFavorites = (x, favorites) => {\r\n    if (!(Array.isArray(favorites) && favorites.length))\r\n        return false;\r\n    const found = favorites.find(favorite => x.key === favorite.key);\r\n    return found !== undefined;\r\n}\r\n\r\nconst forLoopconvertFahrenheitToCelsius = (arr) => {\r\n    if (arrayExists(arr)) {\r\n\r\n        arr.map((current) => {\r\n            current.Temperature.Minimum.Value = convertFahrenheitToCelsius(current.Temperature.Minimum.Value);\r\n            current.Temperature.Maximum.Value = convertFahrenheitToCelsius(current.Temperature.Maximum.Value);\r\n            current.Temperature.Minimum.Unit = 'C';\r\n            current.Temperature.Maximum.Unit = 'C';\r\n            return current;\r\n        });\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst forLoopconvertCelsiusToFahrenheit = (arr) => {\r\n    if (arrayExists(arr)) {\r\n        arr.map((current) => {\r\n            current.Temperature.Minimum.Value = convertCelsiusToFahrenheit(current.Temperature.Minimum.Value);\r\n            current.Temperature.Maximum.Value = convertCelsiusToFahrenheit(current.Temperature.Maximum.Value);\r\n            current.Temperature.Minimum.Unit = 'F';\r\n            current.Temperature.Maximum.Unit = 'F';\r\n            return current;\r\n        });\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nconst convertTemp = (arr, currentUnit) => {\r\n    if (arrayExists(arr)) {\r\n        let newArr = [...arr];\r\n        if (currentUnit === 'F') {\r\n            return forLoopconvertFahrenheitToCelsius(newArr);\r\n        }\r\n        else {\r\n            return forLoopconvertCelsiusToFahrenheit(newArr);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst convertFavoritesToCelsius = () => {\r\n    const favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    // for (let i = 0; i < favorites.length; i++) {\r\n    //     favorites[i].currentTemp = convertFahrenheitToCelsius(favorites[i].currentTemp);\r\n    //     favorites[i].fiveDaysForecast = forLoopconvertFahrenheitToCelsius(favorites[i].fiveDaysForecast);\r\n    // }\r\n\r\n    favorites.map(currentFavorite => {\r\n        currentFavorite.currentTemp = convertFahrenheitToCelsius(currentFavorite.currentTemp);\r\n        currentFavorite.fiveDaysForecast = forLoopconvertFahrenheitToCelsius(currentFavorite.fiveDaysForecast);\r\n        return currentFavorite;\r\n    });\r\n\r\n    return favorites;\r\n\r\n}\r\n\r\nconst convertFavoritesToFahrenheit = () => {\r\n    const favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    // for (let i = 0; i < favorites.length; i++) {\r\n    //     favorites[i].currentTemp = convertCelsiusToFahrenheit(favorites[i].currentTemp);\r\n    //     favorites[i].fiveDaysForecast = forLoopconvertCelsiusToFahrenheit(favorites[i].fiveDaysForecast);\r\n    // }\r\n\r\n    favorites.map(currentFavorite => {\r\n        currentFavorite.currentTemp = convertCelsiusToFahrenheit(currentFavorite.currentTemp);\r\n        currentFavorite.fiveDaysForecast = forLoopconvertCelsiusToFahrenheit(currentFavorite.fiveDaysForecast);\r\n        return currentFavorite;\r\n    });\r\n    return favorites;\r\n}\r\n\r\n\r\nconst convertIconPath = (icon) => {\r\n    //example: 1 => 01\r\n    if (icon < 10) {\r\n        return '0' + icon;\r\n    }\r\n    return icon;\r\n}\r\n\r\n\r\nconst arrayExists = (arr) => {\r\n    return arr !== undefined && arr !== null && arr.length > 0;\r\n}\r\nexport {\r\n    convertCelsiusToFahrenheit,\r\n    convertFahrenheitToCelsius,\r\n    existsInFavorites,\r\n    findKeyByName,\r\n    forLoopconvertCelsiusToFahrenheit,\r\n    forLoopconvertFahrenheitToCelsius,\r\n    convertTemp,\r\n    convertFavoritesToCelsius,\r\n    convertFavoritesToFahrenheit,\r\n    convertIconPath,\r\n    arrayExists\r\n}\r\n\r\n","export const ICON_PATH_1 = \"https://developer.accuweather.com/sites/default/files/\";\r\nexport const ICON_PATH_2 = \"-s.png\";\r\nexport const API_PATH = \"?apikey=eubH33xl3udPrlkaN4qNXhTGkbkYhpWD\";\r\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nexport const DEFAULT_CITY_KEY = \"215854\";\r\nexport const DEFAULT_CITY_NAME = \"Tel Aviv\";\r\nexport const HOME_PATH = \"/aviv-kalmanson-23-9-2020\";\r\nexport const FAVORITES_PATH = \"/aviv-kalmanson-23-9-2020/favorites\";\r\n","import { actionTypes } from '../actionTypes'\r\nimport { store } from '../store'\r\nimport { arrayExists, forLoopconvertFahrenheitToCelsius } from '../../UtilityFunctions/functions'\r\nimport { getFavorites, setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport axios from 'axios'\r\nimport { API_PATH, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME } from '../../Constants/const'\r\nimport { clear } from './actions'\r\n\r\nconst updateText = (val) => {\r\n    return {\r\n        type: actionTypes.UPDATE_TEXT,\r\n        val\r\n    }\r\n}\r\n\r\nconst updateSearch = (arr) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SEARCH,\r\n        arr\r\n    }\r\n}\r\n\r\nconst setCurrentCityDetails = (data, cityKey, cityName) => {\r\n    const unit = store.getState().unit;\r\n    const icon = data[1].data[0].WeatherIcon < 10 ? '0' + data[1].data[0].WeatherIcon : data[1].data[0].WeatherIcon;\r\n    const currentTemp = unit === 'C' ? Math.floor(data[1].data[0].Temperature.Metric.Value) : Math.floor(data[1].data[0].Temperature.Imperial.Value);\r\n    const currentStateOfWeather = data[1].data[0].WeatherText;\r\n    const fiveDaysForecast = unit === 'C' ? forLoopconvertFahrenheitToCelsius(data[0].data.DailyForecasts) : data[0].data.DailyForecasts;\r\n\r\n    return {\r\n        type: actionTypes.SET_CURRENT_CITY_DETAILS,\r\n        data,\r\n        cityKey,\r\n        cityName,\r\n        icon,\r\n        currentTemp,\r\n        currentStateOfWeather,\r\n        fiveDaysForecast\r\n    }\r\n}\r\n\r\nconst updateForecast = (arr) => {\r\n    return {\r\n        type: actionTypes.UPDATE_FORECAST,\r\n        arr\r\n    }\r\n}\r\n\r\nconst addToFavorites = () => {\r\n    const favorites = getFavorites();\r\n    const current = store.getState().current;\r\n    let newFav = [];\r\n    if (!arrayExists(favorites)) {\r\n        newFav.push(current);\r\n    }\r\n    else {\r\n        newFav = favorites.concat(current);\r\n    }\r\n    setFavorites(newFav);\r\n    return {\r\n        type: actionTypes.ADD_TO_FAVORITES,\r\n        favorites: newFav\r\n    }\r\n}\r\n\r\nconst firstTimeFinished = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED,\r\n    }\r\n}\r\n\r\nconst removeFromFavorites = (key) => {\r\n    const favoriteCities = store.getState().favorites;\r\n    const newFavList = favoriteCities.filter(city => city.key !== key);\r\n    setFavorites(newFavList);\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_FAVORITES,\r\n        favorites: newFavList\r\n    }\r\n}\r\n\r\nconst closeModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_MODAL,\r\n    }\r\n}\r\n\r\nconst openModal = (title, text) => {\r\n    return {\r\n        type: actionTypes.OPEN_MODAL,\r\n        title,\r\n        text\r\n    }\r\n}\r\n\r\nconst firstLoad = () => dispatch => { //get first data = Tel Aviv/Current location\r\n    axios.all([axios.get('forecasts/v1/daily/5day/' + DEFAULT_CITY_KEY + API_PATH),\r\n    axios.get('currentconditions/v1/' + DEFAULT_CITY_KEY + API_PATH)])\r\n        .then(data => {\r\n            dispatch(setCurrentCityDetails(data, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME));\r\n            dispatch(firstTimeFinished());\r\n        }).then(() => {\r\n            navigator.geolocation.getCurrentPosition((pos) => { //if success\r\n                let crd = pos.coords;\r\n                axios.get('locations/v1/cities/geoposition/search' + API_PATH + '&q='\r\n                    + crd.latitude + '%2C' + crd.longitude).then(data => {\r\n                        dispatch(submit(data.data.Key, data.data.EnglishName));\r\n                        dispatch(firstTimeFinished());\r\n                    }).catch(error => dispatch(openModal('Error', error.toString())));\r\n            },\r\n                //if error\r\n                () => { dispatch(openModal('Note', 'Access denied to your location! No worries, we will use Tel Aviv as default.')); },\r\n                { //settings\r\n                    enableHighAccuracy: true,\r\n                    timeout: 5000,\r\n                    maximumAge: 0\r\n                });\r\n        }).catch(error => dispatch(openModal('Error', error.toString())));\r\n}\r\n\r\n\r\nconst changeHandler = (event) => dispatch => {\r\n    dispatch(updateText(event.target.value));\r\n    axios.get('locations/v1/cities/autocomplete' + API_PATH + '&q=' + event.target.value)\r\n        .then(response => {\r\n            let arr = [];\r\n            for (let i = 0; i < response.data.length; i++) {\r\n                arr[i] = {\r\n                    key: response.data[i].Key,\r\n                    text: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n                    value: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n\r\n                }\r\n            }\r\n            dispatch(updateSearch(arr));\r\n        }\r\n        ).catch(error => dispatch(openModal('Error', error.toString())));\r\n}\r\n\r\nconst submit = (cityKey, cityName) => dispatch => {\r\n    axios.all([axios.get('forecasts/v1/daily/5day/' + cityKey + API_PATH),\r\n    axios.get('currentconditions/v1/' + cityKey + API_PATH)])\r\n        .then(data => {\r\n            dispatch(setCurrentCityDetails(data, cityKey, cityName));\r\n            dispatch(clear());\r\n        }).catch(errors => dispatch(openModal('Error', errors.toString())));\r\n}\r\n\r\n\r\nexport {\r\n    updateText,\r\n    updateSearch,\r\n    setCurrentCityDetails,\r\n    updateForecast,\r\n    addToFavorites,\r\n    firstTimeFinished,\r\n    removeFromFavorites,\r\n    closeModal,\r\n    openModal,\r\n    submit,\r\n    changeHandler,\r\n    firstLoad\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst customModal = (props) => {\r\n    return (\r\n        <Modal show={props.show} onHide={props.closeModal}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>{props.modalText}</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.closeModal}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n}\r\n\r\nexport default customModal;","import React from 'react';\r\nimport { DAYS } from '../../Constants/const';\r\nimport { Card, NavLink } from 'react-bootstrap';\r\nimport './card.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport { convertIconPath } from '../../UtilityFunctions/functions'\r\n\r\nconst card = (props) => {\r\n    if (props.isFav) {\r\n        return (\r\n            <Card className=\"col-xl-2 favorites-cards\" onClick={props.click} as={NavLink}>\r\n                <Card.Body>\r\n                    <Card.Title className=\"cards-text\">{props.currentFavorite.cityName}</Card.Title>\r\n                    <div className=\"cards-text\">\r\n                        {props.currentTemp} °{props.unit}\r\n                        <div className=\"current-state\" >\r\n                            {props.currentFavorite.currentStateOfWeather}\r\n                        </div>\r\n                        <div className=\"image\">\r\n                            <img src={ICON_PATH_1 + props.currentFavorite.icon + ICON_PATH_2} alt=\"weather icon day\"></img>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n    return (\r\n        <Card className=\"col-xl-2 cards-style\">\r\n            <Card.Body >\r\n                <Card.Title className=\"cards-title\">{DAYS[(props.today + props.index) % 7]}</Card.Title>\r\n                <div className=\"cards-text card-margin\">\r\n                    {props.currentDay.Temperature.Minimum.Value}  - {props.currentDay.Temperature.Maximum.Value} °{props.unit}\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                        <span>Day:</span>\r\n                        <img src={ICON_PATH_1 + convertIconPath(props.currentDay.Day.Icon) + ICON_PATH_2} alt=\"weather icon day\"></img>\r\n                        <span>Night:</span>\r\n                        <img src={ICON_PATH_1 + convertIconPath(props.currentDay.Night.Icon) + ICON_PATH_2} alt=\"weather icon night\"></img>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport Card from '../Card/card'\r\nimport './cardsList.scss'\r\nimport { arrayExists } from '../../UtilityFunctions/functions'\r\n\r\nconst cardsList = (props) => {\r\n    if (props.isFav) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {arrayExists(props.favorites) ? props.favorites.map(currentFavorite => {\r\n                        return <Card\r\n                            key={currentFavorite.key}\r\n                            currentFavorite={currentFavorite}\r\n                            click={() => props.click(currentFavorite)}\r\n                            currentTemp={currentFavorite.currentTemp}\r\n                            unit={props.unit}\r\n                            isFav={props.isFav} />\r\n                    }) : <h1 className={'text-' + props.darkModeText + '-mode-active no-favorites-h1'}>You don't have any favorites currently</h1>}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {arrayExists(props.current.fiveDaysForecast) ? props.current.fiveDaysForecast.map((currentDay, index) => {\r\n                return <Card currentDay={currentDay}\r\n                    today={props.today}\r\n                    index={index}\r\n                    unit={props.unit}\r\n                    key={currentDay.Date}\r\n                    isFav={props.isFav} />\r\n            }\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default cardsList;\r\n","import React from 'react';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const';\r\nimport { BsHeartFill, BsHeart } from 'react-icons/bs';\r\nimport { Button, Jumbotron, Row, Col } from 'react-bootstrap';\r\nimport CardsList from '../CardsList/cardsList';\r\nimport { existsInFavorites } from '../../UtilityFunctions/functions'\r\nimport './Jumbotron.scss'\r\n\r\nconst jumbotronContent = (props) => {\r\n    return (\r\n        <Jumbotron className={\"jumbotron-\" + props.darkModeText + \" container\"}>\r\n            <Row className=\"show-grid\">\r\n                <Col xs={6} className=\"d-flex justify-content-start\">\r\n                    <section >\r\n                        <h3 className=\"DarkText\">{props.current.cityName}</h3>\r\n                        <h3 className=\"DarkText\">{props.current.currentTemp} °{props.unit}</h3>\r\n                        <img src={ICON_PATH_1 + props.current.icon + ICON_PATH_2} alt=\"weather icon\"></img>\r\n                    </section>                        </Col>\r\n                <Col xs={6} className=\"d-flex justify-content-end\">\r\n                    <section>\r\n                        {existsInFavorites(props.current, props.favorites) ? <BsHeartFill className=\"icons\" /> : <BsHeart className=\"icons\" />}\r\n                        <Button variant=\"dark\" className=\"add-to-favorites\" onClick={props.click}>{existsInFavorites(props.current, props.favorites) ? 'Remove from favorites' : 'Add to favorites'}</Button>\r\n                    </section>\r\n                </Col>\r\n            </Row>\r\n            <h1 className=\"dark-text state-of-weather\">{props.current.currentStateOfWeather}</h1>\r\n            <div className=\"cards-list-home\">\r\n                <CardsList\r\n                    current={props.current}\r\n                    today={new Date().getDay()}\r\n                    unit={props.unit}\r\n                    isFav={false}\r\n                />\r\n\r\n            </div>\r\n\r\n        </Jumbotron>\r\n    );\r\n}\r\nexport default jumbotronContent;\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport './home.scss';\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as homeActions from '../../Store/Actions/homeActions'\r\nimport { existsInFavorites, findKeyByName } from '../../UtilityFunctions/functions'\r\nimport { getFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport CustomModal from '../Modal/customModal'\r\nimport JumbotronContent from '../Jumbotron/jumbotronContent'\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        const oldFavorites = getFavorites();\r\n        this.props.updateFavorites(oldFavorites);\r\n        if (this.props.first) {  //actions async\r\n            this.props.firstLoad();\r\n        }\r\n    }\r\n\r\n    addToFavoritesHandler = () => {\r\n        if (!existsInFavorites(this.props.current, this.props.favorites)) {\r\n            this.props.addToFavorites();\r\n        }\r\n        else {\r\n            this.props.removeFromFavorites(this.props.current.key);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.darkModeText}>\r\n\r\n                <section className=\"search\">\r\n                    <Dropdown\r\n                        className='icon search-dropdown-style'\r\n                        icon='world'\r\n                        button\r\n                        floating\r\n                        labeled\r\n                        options={this.props.searchText}\r\n                        search\r\n                        placeholder=\"Enter City\"\r\n                        onSearchChange={(event) => this.props.changeHandler(event)}\r\n                        onChange={(event) => { this.props.submit(findKeyByName(event.currentTarget.textContent, this.props.searchText), event.currentTarget.textContent.split(',')[0]) }}\r\n                    />\r\n                </section>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <JumbotronContent\r\n                        unit={this.props.unit}\r\n                        current={this.props.current}\r\n                        favorites={this.props.favorites}\r\n                        click={this.addToFavoritesHandler}\r\n                        darkModeText={this.props.darkModeText}\r\n                    />\r\n\r\n                </CSSTransitionGroup>\r\n\r\n\r\n                <CustomModal\r\n                    modalTitle={this.props.modalTitle}\r\n                    modalText={this.props.modalText}\r\n                    closeModal={this.props.closeModal}\r\n                    show={this.props.show}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favorites: state.favorites,\r\n        current: state.current,\r\n        text: state.searchText,\r\n        searchText: state.searchArr,\r\n        unit: state.unit,\r\n        first: state.firstTime,\r\n        darkMode: state.darkmode,\r\n        show: state.show,\r\n        modalText: state.modalText,\r\n        modalTitle: state.modalTitle,\r\n        darkModeText: state.darkModeText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateText: (val) => dispatch(homeActions.updateText(val)),\r\n        updateSearch: (arr) => dispatch(homeActions.updateSearch(arr)),\r\n        setCurrentCityDetails: (data, cityKey, cityName) => dispatch(homeActions.setCurrentCityDetails(data, cityKey, cityName)),\r\n        updateForecast: (arr) => dispatch(homeActions.updateForecast(arr)),\r\n        addToFavorites: () => dispatch(homeActions.addToFavorites()),\r\n        firstTimeFinished: () => dispatch(homeActions.firstTimeFinished()),\r\n        clearText: () => dispatch(generalActions.clear()),\r\n        removeFromFavorites: (key) => dispatch(homeActions.removeFromFavorites(key)),\r\n        closeModal: () => dispatch(homeActions.closeModal()),\r\n        openModal: (title, text) => dispatch(homeActions.openModal(title, text)),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n        submit: (cityKey, cityName) => dispatch(homeActions.submit(cityKey, cityName)),\r\n        changeHandler: (event) => dispatch(homeActions.changeHandler(event)),\r\n        firstLoad: () => dispatch(homeActions.firstLoad()),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { getFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport { forLoopconvertFahrenheitToCelsius } from '../../UtilityFunctions/functions'\r\nimport { API_PATH } from '../../Constants/const'\r\nimport { updateFavorites } from './actions'\r\nimport { store } from '../store'\r\n\r\n\r\nconst setFavoriteCityDetails = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_FAVORITE_CITY_DETAILS,\r\n        payload\r\n    }\r\n}\r\n\r\nconst firstTimeFinishedFavorites = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED_FAVORITES,\r\n    }\r\n}\r\n\r\nconst firstLoadFavorites = () => dispatch => {\r\n    const oldFavorites = getFavorites();\r\n    let requests = [];\r\n    for (const favorite of oldFavorites) {\r\n        requests.push(\r\n            axios.all([axios.get('forecasts/v1/daily/5day/' + favorite.key + API_PATH),\r\n            axios.get('currentconditions/v1/' + favorite.key + API_PATH)])\r\n        )\r\n    }\r\n\r\n    const unit = store.getState().unit;\r\n\r\n    axios.all(requests).then((response) => {\r\n        for (let i = 0; i < response.length; i++) {\r\n            oldFavorites[i].fiveDaysForecast = unit === 'C' ? forLoopconvertFahrenheitToCelsius(response[i][0].data.DailyForecasts) : response[i][0].data.DailyForecasts;\r\n            oldFavorites[i].currentStateOfWeather = response[i][1].data[0].WeatherText;\r\n            oldFavorites[i].currentTemp = unit === 'C' ? Math.floor(response[i][1].data[0].Temperature.Metric.Value) : Math.floor(response[i][1].data[0].Temperature.Imperial.Value);\r\n            oldFavorites[i].icon = response[i][1].data[0].WeatherIcon < 10 ? '0' + response[i][1].data[0].WeatherIcon : response[i][1].data[0].WeatherIcon;\r\n        }\r\n        dispatch(updateFavorites(oldFavorites));\r\n        dispatch(firstTimeFinishedFavorites());\r\n    })\r\n}\r\n\r\nexport {\r\n    setFavoriteCityDetails,\r\n    firstTimeFinishedFavorites,\r\n    firstLoadFavorites\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../../App.scss'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as favoritesActions from '../../Store/Actions/favoritesActions'\r\nimport CardsList from '../CardsList/cardsList'\r\nimport { HOME_PATH } from '../../Constants/const'\r\n\r\n\r\nclass Favorites extends Component {\r\n\r\n    componentDidMount() {\r\n        if (this.props.firstTimeFavorites) {\r\n            this.props.firstLoadFavorites();\r\n        }\r\n    }\r\n\r\n    handleClickOnCard = (clickedFavorite) => {\r\n        this.props.history.push(HOME_PATH);\r\n        this.props.clearText();\r\n        this.props.setFavoriteCityDetails(clickedFavorite);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.darkModeText}>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <CardsList\r\n                        click={(currentFavorite) => this.handleClickOnCard(currentFavorite)}\r\n                        unit={this.props.unit}\r\n                        favorites={this.props.favorites}\r\n                        darkModeText={this.props.darkModeText}\r\n                        isFav={true}\r\n                    />\r\n                </CSSTransitionGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favorites: state.favorites,\r\n        current: state.current,\r\n        darkMode: state.darkmode,\r\n        unit: state.unit,\r\n        firstTimeFavorites: state.firstTimeFavorites,\r\n        darkModeText: state.darkModeText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setFavoriteCityDetails: (clickedFavorite) => dispatch(favoritesActions.setFavoriteCityDetails(clickedFavorite)),\r\n        clearText: () => dispatch(generalActions.clear()),\r\n        firstTimeFinishedFavorites: () => dispatch(favoritesActions.firstTimeFinishedFavorites()),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n        firstLoadFavorites: () => dispatch(favoritesActions.firstLoadFavorites())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);","import React, { Component } from 'react';\r\nimport '../../App.scss';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as navigationBarActions from '../../Store/Actions/navigationBarActions'\r\nimport { existsInFavorites, convertFavoritesToCelsius, convertFavoritesToFahrenheit, convertFahrenheitToCelsius, convertCelsiusToFahrenheit, convertTemp } from '../../UtilityFunctions/functions';\r\nimport { HOME_PATH, FAVORITES_PATH } from '../../Constants/const'\r\n\r\n\r\nclass NavigationBar extends Component {\r\n    toggleHandle = () => {\r\n\r\n        const unit = this.props.unit;\r\n        let newUnit, currentNewTemp, newFavorites;\r\n        if (unit === 'C') {\r\n            newUnit = 'F';\r\n            currentNewTemp = convertCelsiusToFahrenheit(this.props.current.currentTemp);\r\n            newFavorites = convertFavoritesToFahrenheit();\r\n        }\r\n        else {\r\n            newUnit = 'C';\r\n            currentNewTemp = convertFahrenheitToCelsius(this.props.current.currentTemp);\r\n            newFavorites = convertFavoritesToCelsius();\r\n        }\r\n\r\n        if (!existsInFavorites(this.props.favorites, this.props.current)) {\r\n            this.props.toggle(\r\n                currentNewTemp,\r\n                newUnit,\r\n                convertTemp(this.props.current.fiveDaysForecast, unit)\r\n            );\r\n        }\r\n        this.props.updateFavorites(newFavorites);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Navbar collapseOnSelect expand=\"lg\" bg={this.props.darkMode ? \"light\" : \"dark\"} variant={this.props.darkMode ? \"light\" : \"dark\"} >\r\n                <Navbar.Brand as={Link} to={HOME_PATH}>Herolo Weather Task</Navbar.Brand>\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40' }}\r\n                    onClick={() => { this.toggleHandle() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    <span className={this.props.unit === 'C' ? 'active' : null}>°C </span>\r\n                    <span>/</span>\r\n                    <span className={this.props.unit === 'F' ? 'active' : null}> °F</span>\r\n                </Button>\r\n\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40', marginLeft: '10px' }}\r\n                    onClick={() => { this.props.toggleDarkMode() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    Dark Mode\r\n                </Button>\r\n\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link as={Link} to={HOME_PATH}>Home</Nav.Link>\r\n                        <Nav.Link as={Link} to={FAVORITES_PATH}>\r\n                            Favorites </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggle: (newTemp, newUnit, fiveDays) => dispatch(navigationBarActions.toggle(newTemp, newUnit, fiveDays)),\r\n        toggleDarkMode: () => dispatch(navigationBarActions.toggleDarkMode()),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        darkMode: state.darkmode,\r\n        unit: state.unit,\r\n        current: state.current,\r\n        favorites: state.favorites\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar);\r\n\r\n","import { actionTypes } from '../actionTypes'\r\n\r\nconst toggle = (newTemp, newUnit, fiveDays) => {\r\n    return {\r\n        type: actionTypes.TOGGLE,\r\n        unit: newUnit,\r\n        currentTemp: newTemp,\r\n        fiveDaysForecast: fiveDays\r\n    }\r\n}\r\n\r\nconst toggleDarkMode = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_DARK_MODE,\r\n    }\r\n}\r\n\r\nexport {\r\n    toggle,\r\n    toggleDarkMode\r\n}","import React, { Component } from 'react';\nimport './App.scss';\nimport Home from './Components/Home/Home'\nimport Favorites from './Components/Favorites/Favorites'\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport NavigationBar from './Components/NavigationBar/NavigationBar'\nimport { HOME_PATH, FAVORITES_PATH } from './Constants/const'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <BrowserRouter>\n          <NavigationBar />\n          <Route path={HOME_PATH} exact component={Home} />\n          <Route path={FAVORITES_PATH} exact component={Favorites} />\n        </BrowserRouter>\n      </div>\n    );\n  }\n\n}\n\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { store } from './Store/store'\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'https://dataservice.accuweather.com/';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}