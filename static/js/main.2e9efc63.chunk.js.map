{"version":3,"sources":["Store/actionTypes.js","UtilityFunctions/localStorageFunctions.js","Store/Actions/actions.js","Store/Reducers/homeReducer.js","Store/Reducers/favoritesReducer.js","Store/Reducers/navigationBarReducer.js","Store/store.js","UtilityFunctions/functions.js","Constants/const.js","Store/Actions/homeActions.js","Components/Modal/customModal.js","Components/Card/card.js","Components/FavoriteCard/favoriteCard.js","Components/CardsList/cardsList.js","Components/Jumbotron/jumbotronContent.js","Components/Home/Home.js","Store/Actions/favoritesActions.js","Components/Favorites/Favorites.js","Components/NavigationBar/NavigationBar.js","Store/Actions/navigationBarActions.js","App.js","Components/ErrorBoundary/ErrorBoundary.js","index.js"],"names":["actionTypes","getFavorites","JSON","parse","localStorage","getItem","setFavorites","favorites","setItem","stringify","clear","type","updateFavorites","loading","initialState","current","searchText","searchArr","firstTime","show","modalTitle","modalText","homeReducer","state","action","val","arr","key","cityKey","cityName","currentTemp","currentStateOfWeather","fiveDaysForecast","icon","title","text","payload","unit","firstTimeFavorites","favoritesReducer","darkmode","darkModeText","navigationBarReducer","rootReducer","combineReducers","home","navigation","store","createStore","applyMiddleware","thunk","convertCelsiusToFahrenheit","celsius","toFixed","convertFahrenheitToCelsius","fahrenheit","existsInFavorites","x","Array","isArray","length","undefined","find","favorite","convertTemp","arrayExists","map","Temperature","Minimum","Unit","Value","Maximum","convertFavoritesToCelsius","currentFavorite","convertFavoritesToFahrenheit","convertIconPath","ICON_PATH_1","API_PATH","DAYS","HOME_PATH","updateText","updateSearch","setCurrentCityDetails","data","getState","WeatherIcon","Math","floor","Metric","Imperial","WeatherText","DailyForecasts","firstTimeFinished","closeModal","openModal","submit","dispatch","a","axios","all","get","errors","toString","CustomModal","props","useDispatch","useSelector","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","card","today","index","currentDay","Card","className","src","Day","Icon","alt","Night","favoriteCard","click","as","NavLink","CardsList","isFav","Date","jumbotronContent","Jumbotron","Row","Col","md","span","offset","getDay","Home","addToFavoritesHandler","removeFromFavorites","addToFavorites","changeHandlerDelay","debounce","event","changeHandler","i","Image","oldFavorites","this","firstLoad","Spinner","animation","Dropdown","button","floating","labeled","options","search","placeholder","onSearchChange","persist","onChange","name","city","findKeyByName","currentTarget","textContent","split","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","Component","connect","homeActions","newFav","concat","push","clearText","generalActions","newFavList","filter","target","value","response","Key","LocalizedName","AdministrativeArea","Country","ID","error","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","EnglishName","enableHighAccuracy","timeout","maximumAge","firstTimeFinishedFavorites","Favorites","handleClickOnCard","clickedFavorite","history","setFavoriteCityDetails","firstLoadFavorites","favoritesActions","requests","NavigationBar","toggleHandle","newUnit","currentNewTemp","newFavorites","toggle","Navbar","collapseOnSelect","expand","bg","darkMode","Brand","Link","to","style","backgroundColor","border","marginLeft","toggleDarkMode","Toggle","aria-controls","Collapse","id","Nav","newTemp","fiveDays","navigationBarActions","App","path","exact","component","ErrorBoundary","hasError","children","defaults","baseURL","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e9efc63.chunk.js","sourcesContent":["export const actionTypes = {\r\n    UPDATE_TEXT: 'UPDATE_TEXT',\r\n    UPDATE_SEARCH: 'UPDATE_SEARCH',\r\n    SET_CURRENT_CITY_DETAILS: 'SET_CURRENT_CITY_DETAILS',\r\n    TOGGLE: 'TOGGLE',\r\n    UPDATE_FORECAST: 'UPDATE_FORECAST',\r\n    ADD_TO_FAVORITES: 'ADD_TO_FAVORITES',\r\n    SET_FAVORITE_CITY_DETAILS: 'SET_FAVORITE_CITY_DETAILS',\r\n    FIRST_TIME_FINISHED: 'FIRST_TIME_FINISHED',\r\n    CLEAR: 'CLEAR',\r\n    REMOVE_FROM_FAVORITES: 'REMOVE_FROM_FAVORITES',\r\n    TOGGLE_DARK_MODE: 'TOGGLE_DARK_MODE',\r\n    CLOSE_MODAL: 'CLOSE_MODAL',\r\n    OPEN_MODAL: 'OPEN_MODAL',\r\n    UPDATE_FAVORITES: 'UPDATE_FAVORITES',\r\n    FIRST_TIME_FINISHED_FAVORITES: 'FIRST_TIME_FINISHED_FAVORITES',\r\n    LOADING: 'LOADING'\r\n};\r\n\r\n","const getFavorites = () => {\r\n    return JSON.parse(localStorage.getItem('favorites'));\r\n}\r\n\r\nconst setFavorites = (favorites) => {\r\n    localStorage.setItem('favorites', JSON.stringify(favorites));\r\n}\r\n\r\nexport{\r\n    getFavorites,\r\n    setFavorites\r\n}","import { actionTypes } from '../actionTypes'\r\nimport { setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\n\r\nconst clear = () => {\r\n    return {\r\n        type: actionTypes.CLEAR,\r\n    }\r\n}\r\n\r\nconst updateFavorites = (favorites) => {\r\n    setFavorites(favorites);\r\n    return {\r\n        type: actionTypes.UPDATE_FAVORITES,\r\n        favorites\r\n    }\r\n}\r\n\r\nconst loading = () => {\r\n    return{\r\n        type: actionTypes.LOADING\r\n    }\r\n}\r\n\r\nexport {\r\n    clear,\r\n    updateFavorites,\r\n    loading\r\n}","const initialState = {\r\n    favorites: [], \r\n    current: {}, \r\n    searchText: '', \r\n    searchArr: [], \r\n    firstTime: true, \r\n    show: false,\r\n    modalTitle: '', \r\n    modalText: '',\r\n    loading: false \r\n}\r\n\r\n\r\nconst homeReducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'UPDATE_TEXT': \r\n            return {\r\n                ...state,\r\n                searchText: action.val\r\n            }\r\n        case 'UPDATE_SEARCH':  \r\n            return {\r\n                ...state,\r\n                searchArr: action.arr\r\n            }\r\n        case 'SET_CURRENT_CITY_DETAILS': \r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                current: {\r\n                    key: action.cityKey,\r\n                    cityName: action.cityName,\r\n                    currentTemp: action.currentTemp,\r\n                    currentStateOfWeather: action.currentStateOfWeather,\r\n                    fiveDaysForecast: action.fiveDaysForecast,\r\n                    icon: action.icon\r\n                },\r\n\r\n            }\r\n        case 'ADD_TO_FAVORITES': \r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n\r\n        case 'FIRST_TIME_FINISHED': \r\n            return {\r\n                ...state,\r\n                firstTime: false\r\n            }\r\n        case 'REMOVE_FROM_FAVORITES': \r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n\r\n        case 'CLOSE_MODAL': \r\n            return {\r\n                ...state,\r\n                show: false\r\n            }\r\n        case 'OPEN_MODAL': \r\n            return {\r\n                ...state,\r\n                show: true,\r\n                modalTitle: action.title,\r\n                modalText: action.text\r\n            }\r\n            \r\n        case 'UPDATE_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites,\r\n                loading: false\r\n            }\r\n\r\n        case 'CLEAR': \r\n            return {\r\n                ...state,\r\n                searchArr: [],\r\n                searchText: ''\r\n            }\r\n\r\n        case 'SET_FAVORITE_CITY_DETAILS': \r\n            return {\r\n                ...state,\r\n                current: { ...action.payload },\r\n            }\r\n\r\n        case 'TOGGLE': \r\n            return {\r\n                ...state,\r\n                unit: action.unit,\r\n                current: {\r\n                    ...state.current,\r\n                    currentTemp: action.currentTemp,\r\n                    fiveDaysForecast: action.fiveDaysForecast\r\n                }\r\n            }\r\n\r\n        case 'LOADING': \r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default homeReducer;","const initialState = {\r\n    firstTimeFavorites: true,\r\n}\r\n\r\n\r\nconst favoritesReducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'FIRST_TIME_FINISHED_FAVORITES': \r\n            return {\r\n                ...state,\r\n                firstTimeFavorites: false,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default favoritesReducer;","const initialState = {\r\n    unit: 'C',\r\n    darkmode: false,\r\n    darkModeText: 'light'\r\n}\r\n\r\n\r\nconst navigationBarReducer = (state = initialState, action) => { \r\n    switch (action.type) {\r\n        case 'TOGGLE_DARK_MODE': \r\n            return{\r\n                ...state,\r\n                darkmode: !state.darkmode,\r\n                darkModeText: state.darkModeText==='light' ? 'dark' : 'light'\r\n            }\r\n\r\n        case 'TOGGLE': \r\n            return {\r\n                ...state,\r\n                unit: action.unit,\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default navigationBarReducer;","import homeReducer from './Reducers/homeReducer'\r\nimport favoritesReducer from './Reducers/favoritesReducer'\r\nimport navigationBarReducer from './Reducers/navigationBarReducer'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    home: homeReducer,\r\n    favorites: favoritesReducer,\r\n    navigation: navigationBarReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n","const convertCelsiusToFahrenheit = (celsius) => {\r\n    let fahrenheit = (celsius * 1.8) + 32;\r\n    return fahrenheit.toFixed(1);\r\n}\r\n\r\nconst convertFahrenheitToCelsius = (fahrenheit) => {\r\n    let celsius = (fahrenheit - 32) / 1.8;\r\n    return celsius.toFixed(1);\r\n}\r\n\r\nconst findKeyByName = (name, searchText) => {\r\n    const city = searchText.find(current => current.text === name);\r\n    if (city === undefined) //if clicked on the enter key\r\n        return searchText[0].key;\r\n    return city.key; //if clicked on a city with the mouse\r\n}\r\n\r\nconst existsInFavorites = (x, favorites) => {\r\n    if (!(Array.isArray(favorites) && favorites.length))\r\n        return false;\r\n    const found = favorites.find(favorite => x.key === favorite.key);\r\n    return found !== undefined;\r\n}\r\n\r\nconst convertTemp = (arr) => {\r\n    if (arrayExists(arr)) {\r\n        arr.map((current) => {\r\n            if(current.Temperature.Minimum.Unit === 'F'){\r\n                current.Temperature.Minimum.Value = convertFahrenheitToCelsius(current.Temperature.Minimum.Value);\r\n                current.Temperature.Maximum.Value = convertFahrenheitToCelsius(current.Temperature.Maximum.Value);\r\n                current.Temperature.Minimum.Unit = 'C';\r\n                current.Temperature.Maximum.Unit = 'C';\r\n            }\r\n            else{\r\n                current.Temperature.Minimum.Value = convertCelsiusToFahrenheit(current.Temperature.Minimum.Value);\r\n                current.Temperature.Maximum.Value = convertCelsiusToFahrenheit(current.Temperature.Maximum.Value);\r\n                current.Temperature.Minimum.Unit = 'F';\r\n                current.Temperature.Maximum.Unit = 'F';\r\n            }\r\n            \r\n            return current;\r\n        });\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst convertFavoritesToCelsius = () => {\r\n    const favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    if(arrayExists(favorites)){\r\n        favorites.map(currentFavorite => {\r\n            currentFavorite.currentTemp = convertFahrenheitToCelsius(currentFavorite.currentTemp);\r\n            currentFavorite.fiveDaysForecast = convertTemp(currentFavorite.fiveDaysForecast);\r\n            return currentFavorite;\r\n        });\r\n    }\r\n\r\n    return favorites;\r\n\r\n}\r\n\r\nconst convertFavoritesToFahrenheit = () => {\r\n    const favorites = JSON.parse(localStorage.getItem('favorites'));\r\n    if(arrayExists(favorites)){\r\n        favorites.map(currentFavorite => {\r\n            currentFavorite.currentTemp = convertCelsiusToFahrenheit(currentFavorite.currentTemp);\r\n            currentFavorite.fiveDaysForecast = convertTemp(currentFavorite.fiveDaysForecast);\r\n            return currentFavorite;\r\n        });\r\n    }\r\n    return favorites;\r\n}\r\n\r\n\r\nconst convertIconPath = (icon) => {\r\n    //example: 1 => 01\r\n    if (icon < 10) {\r\n        return '0' + icon;\r\n    }\r\n    return icon;\r\n}\r\n\r\n\r\nconst arrayExists = (arr) => {\r\n    return arr !== undefined && arr !== null && arr.length > 0;\r\n}\r\nexport {\r\n    convertCelsiusToFahrenheit,\r\n    convertFahrenheitToCelsius,\r\n    existsInFavorites,\r\n    findKeyByName,\r\n    convertTemp,\r\n    convertFavoritesToCelsius,\r\n    convertFavoritesToFahrenheit,\r\n    convertIconPath,\r\n    arrayExists\r\n}\r\n\r\n","export const ICON_PATH_1 = 'https://www.accuweather.com/images/weathericons/';\r\nexport const ICON_PATH_2 = '.svg';\r\nexport const API_PATH = '?apikey=eubH33xl3udPrlkaN4qNXhTGkbkYhpWD';\r\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nexport const DEFAULT_CITY_KEY = '215854';\r\nexport const DEFAULT_CITY_NAME = 'Tel Aviv';\r\nexport const HOME_PATH = '/aviv-kalmanson-23-9-2020';\r\nexport const FAVORITES_PATH = '/aviv-kalmanson-23-9-2020/favorites';\r\n","import { actionTypes } from '../actionTypes'\r\nimport { store } from '../store'\r\nimport { arrayExists, convertTemp } from '../../UtilityFunctions/functions'\r\nimport { getFavorites, setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport axios from 'axios'\r\nimport { API_PATH, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME } from '../../Constants/const'\r\nimport { clear, loading } from './actions'\r\n\r\nconst updateText = (val) => {\r\n    return {\r\n        type: actionTypes.UPDATE_TEXT,\r\n        val\r\n    }\r\n}\r\n\r\nconst updateSearch = (arr) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SEARCH,\r\n        arr\r\n    }\r\n}\r\n\r\nconst setCurrentCityDetails = (data, cityKey, cityName) => {\r\n    const unit = store.getState().navigation.unit;\r\n    const icon = data[1].data[0].WeatherIcon < 10 ? '0' + data[1].data[0].WeatherIcon : data[1].data[0].WeatherIcon;\r\n    const currentTemp = unit === 'C' ? Math.floor(data[1].data[0].Temperature.Metric.Value) : Math.floor(data[1].data[0].Temperature.Imperial.Value);\r\n    const currentStateOfWeather = data[1].data[0].WeatherText;\r\n    const fiveDaysForecast = unit === 'C' ? convertTemp(data[0].data.DailyForecasts) : data[0].data.DailyForecasts;\r\n\r\n    return {\r\n        type: actionTypes.SET_CURRENT_CITY_DETAILS,\r\n        data,\r\n        cityKey,\r\n        cityName,\r\n        icon,\r\n        currentTemp,\r\n        currentStateOfWeather,\r\n        fiveDaysForecast\r\n    }\r\n}\r\n\r\nconst addToFavorites = () => {\r\n    const favorites = getFavorites();\r\n    const current = store.getState().home.current;\r\n    let newFav = [];\r\n    if (!arrayExists(favorites)) {\r\n        newFav.push(current);\r\n    }\r\n    else {\r\n        newFav = favorites.concat(current);\r\n    }\r\n    setFavorites(newFav);\r\n    return {\r\n        type: actionTypes.ADD_TO_FAVORITES,\r\n        favorites: newFav\r\n    }\r\n}\r\n\r\nconst firstTimeFinished = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED,\r\n    }\r\n}\r\n\r\nconst removeFromFavorites = (key) => {\r\n    const favoriteCities = store.getState().home.favorites;\r\n    const newFavList = favoriteCities.filter(city => city.key !== key);\r\n    setFavorites(newFavList);\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_FAVORITES,\r\n        favorites: newFavList\r\n    }\r\n}\r\n\r\nconst closeModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_MODAL,\r\n    }\r\n}\r\n\r\nconst openModal = (title, text) => {\r\n    return {\r\n        type: actionTypes.OPEN_MODAL,\r\n        title,\r\n        text\r\n    }\r\n}\r\n\r\n\r\n\r\nconst firstLoad = () => async dispatch => { //get first data = Tel Aviv/Current location\r\n    dispatch(loading());\r\n    const data = await axios.all([axios.get('forecasts/v1/daily/5day/' + DEFAULT_CITY_KEY + API_PATH),\r\n    axios.get('currentconditions/v1/' + DEFAULT_CITY_KEY + API_PATH)]);\r\n    dispatch(setCurrentCityDetails(data, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME));\r\n    dispatch(firstTimeFinished()); \r\n\r\n    try{\r\n        navigator.geolocation.getCurrentPosition(async (pos) => { //if success\r\n            let crd = pos.coords;\r\n            const response = await axios.get(`locations/v1/cities/geoposition/search${API_PATH}&q=${crd.latitude}%2C${crd.longitude}`);\r\n            dispatch(submit(response.data.Key, response.data.EnglishName));\r\n            dispatch(firstTimeFinished());\r\n        },\r\n            //if error\r\n            () => { dispatch(openModal('Note', 'Access denied to your location! No worries, we will use Tel Aviv as default.')); },\r\n            { //settings\r\n                enableHighAccuracy: true,\r\n                timeout: 5000,\r\n                maximumAge: 0\r\n            });\r\n    }\r\n    catch(error){\r\n        dispatch(openModal('Error', error.toString()));\r\n    }\r\n   \r\n}\r\n\r\n\r\nconst changeHandler = (event) => async dispatch => {\r\n    dispatch(updateText(event.target.value));\r\n    const response =  await axios.get('locations/v1/cities/autocomplete' + API_PATH + '&q=' + event.target.value)\r\n    try{\r\n        let arr = [];\r\n        for (let i = 0; i < response.data.length; i++) {\r\n            arr[i] = {\r\n                key: response.data[i].Key,\r\n                text: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n                value: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n    \r\n            }\r\n        }\r\n        dispatch(updateSearch(arr));\r\n    }\r\n    catch(error){\r\n        dispatch(openModal('Error', error.toString()));\r\n    }\r\n    \r\n    \r\n}\r\n\r\nconst submit = (cityKey, cityName) => async dispatch => {\r\n    dispatch(loading());\r\n    const data = await axios.all([axios.get('forecasts/v1/daily/5day/' + cityKey + API_PATH),\r\n    axios.get('currentconditions/v1/' + cityKey + API_PATH)]);\r\n\r\n    try{\r\n        dispatch(setCurrentCityDetails(data, cityKey, cityName));\r\n        dispatch(clear());\r\n    }\r\n    catch(errors){\r\n        dispatch(openModal('Error', errors.toString()));\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    updateText,\r\n    updateSearch,\r\n    setCurrentCityDetails,\r\n    addToFavorites,\r\n    firstTimeFinished,\r\n    removeFromFavorites,\r\n    closeModal,\r\n    openModal,\r\n    submit,\r\n    changeHandler,\r\n    firstLoad\r\n}\r\n\r\n","import React from 'react'\r\nimport propTypes from 'prop-types';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {closeModal} from '../../Store/Actions/homeActions'\r\n\r\nconst CustomModal = (props) => {\r\n    const dispatch = useDispatch();\r\n    const modalTitle = useSelector(state => state.home.modalTitle);\r\n    const modalText = useSelector(state => state.home.modalText);\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={() => dispatch(closeModal())}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>{modalText}</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => dispatch(closeModal())}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n}\r\n\r\nCustomModal.propTypes = {\r\n    modalTitle: propTypes.string,\r\n    modalText: propTypes.string,\r\n    closeModal: propTypes.func,\r\n    show: propTypes.bool,\r\n}\r\n\r\nexport default CustomModal;","import React from 'react';\r\nimport { DAYS } from '../../Constants/const';\r\nimport { Card } from 'react-bootstrap';\r\nimport './card.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport { convertIconPath } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst card = (props) => {\r\n    const {today,index,currentDay,unit} = props;\r\n    return (\r\n        <Card className=\"col-xl-2 cards-style\">\r\n            <Card.Body className=\"light\">\r\n                <Card.Title className=\"cards-title\">{DAYS[(today + index) % 7]}</Card.Title>\r\n                <div className=\"cards-text card-margin\">\r\n                    {currentDay.Temperature.Minimum.Value}  - {currentDay.Temperature.Maximum.Value} °{unit}\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                        <span className=\"d-flex justify-content-start span-width\">Day:</span>\r\n                        <img className=\"icons-images\" src={ICON_PATH_1 + convertIconPath(currentDay.Day.Icon) + ICON_PATH_2} alt=\"weather icon day\"></img>\r\n                    </div>\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                    <span className=\"d-flex justify-content-start span-width\">Night:</span>\r\n                        <img className=\"icons-images\" src={ICON_PATH_1 + convertIconPath(currentDay.Night.Icon) + ICON_PATH_2} alt=\"weather icon night\"></img>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\ncard.propTypes = {\r\n    currentDay: propTypes.object,\r\n    unit: propTypes.string,\r\n    index: propTypes.number,\r\n    today: propTypes.number \r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport { Card, NavLink } from 'react-bootstrap';\r\nimport './favoriteCard.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\n\r\nconst favoriteCard = (props) => {\r\n    const {currentTemp,cityName,currentStateOfWeather, icon} = props.currentFavorite;\r\n    const {click,unit} = props;\r\n    return(\r\n        <Card className=\"col-lg-2 favorites-cards\" onClick={click} as={NavLink}>\r\n                <Card.Body>\r\n                    <Card.Title className=\"cards-text\">{cityName}</Card.Title>\r\n                    <div className=\"cards-text\">\r\n                        {currentTemp} °{unit}\r\n                        <div className=\"current-state\" >\r\n                            {currentStateOfWeather}\r\n                        </div>\r\n                        <div className=\"image\">\r\n                            <img className=\"icons-images\" src={ICON_PATH_1 + icon + ICON_PATH_2} alt=\"weather icon day\"></img>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n    );\r\n}\r\n\r\n\r\nfavoriteCard.propTypes = {\r\n    currentFavorite: propTypes.object,\r\n    unit: propTypes.string,\r\n    click: propTypes.func,\r\n}\r\n\r\nexport default favoriteCard;","import React from 'react'\r\nimport Card from '../Card/card'\r\nimport FavoriteCard from '../FavoriteCard/favoriteCard'\r\nimport './cardsList.scss'\r\nimport { arrayExists } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst CardsList = (props) => {\r\n    const {favorites,click,today,current, unit} = props;\r\n    if (props.isFav) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {arrayExists(favorites) ? favorites.map(currentFavorite => {\r\n                        return <FavoriteCard\r\n                            key={currentFavorite.key}\r\n                            currentFavorite={currentFavorite}\r\n                            click={() => click(currentFavorite)}\r\n                            currentTemp={currentFavorite.currentTemp}\r\n                            unit={unit}/>\r\n                    }) : <h1 className={`text-${props.darkModeText}-mode-active no-favorites-h1`}>You don't have any favorites currently</h1>}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {arrayExists(current.fiveDaysForecast) && current.fiveDaysForecast.map((currentDay, index) => {\r\n                return <Card currentDay={currentDay}\r\n                    today={today}\r\n                    index={index}\r\n                    unit={unit}\r\n                    key={currentDay.Date}\r\n                    />\r\n            }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nCardsList.propTypes = {\r\n    unit: propTypes.string,\r\n    current: propTypes.object,\r\n    favorites: propTypes.array,\r\n    click: propTypes.func,\r\n    darkModeText: propTypes.string,\r\n    isFav: propTypes.bool,\r\n    today: propTypes.number\r\n}\r\n\r\nexport default CardsList;\r\n","import React from 'react';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const';\r\nimport { BsHeartFill, BsHeart } from 'react-icons/bs';\r\nimport { Button, Jumbotron, Row, Col } from 'react-bootstrap';\r\nimport CardsList from '../CardsList/cardsList';\r\nimport { existsInFavorites } from '../../UtilityFunctions/functions'\r\nimport './Jumbotron.scss'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\n\r\nconst jumbotronContent = (props) => {\r\n    const {darkModeText,current,favorites,click,unit} = props;\r\n    if(current.icon === undefined){\r\n        return(<div></div>)\r\n    }\r\n    return (\r\n        <Jumbotron className={`jumbotron-${darkModeText} container fluid`}>\r\n            <Row className=\"show-grid\">\r\n                <Col md={{ span: 6, offset: 3 }} className=\"justify-content-center\">\r\n                    <section >\r\n                        <h3>{current.cityName}</h3>\r\n                        <h3>{current.currentTemp} °{unit}</h3>\r\n                        <img className=\"icons-images\" src={ICON_PATH_1 + current.icon + ICON_PATH_2} alt=\"weather icon\"></img>\r\n                    </section>                        </Col>\r\n                <Col md={3} className=\"d-flex justify-content-center\">\r\n                    <section>\r\n                        {existsInFavorites(current, favorites) ? <BsHeartFill className=\"icons\" onClick={click}/>  : <BsHeart className=\"icons\" onClick={click}/>}\r\n                        <Button variant=\"dark\" className=\"add-to-favorites\" onClick={click}>{existsInFavorites(current, favorites) ? 'Remove from favorites' : 'Add to favorites'}</Button>\r\n                    </section>\r\n                </Col>\r\n            </Row>\r\n            <h1 className=\"dark-text state-of-weather\">{current.currentStateOfWeather}</h1>\r\n            <div className=\"cards-list-home\">\r\n                <CardsList\r\n                    current={current}\r\n                    today={new Date().getDay()}\r\n                    unit={unit}\r\n                    isFav={false}\r\n                />\r\n\r\n            </div>\r\n\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\njumbotronContent.propTypes = {\r\n    unit: propTypes.string,\r\n    current: propTypes.object,\r\n    favorites: propTypes.array,\r\n    click: propTypes.func,\r\n    darkModeText: propTypes.string\r\n}\r\n\r\nexport default jumbotronContent;\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport './home.scss';\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as homeActions from '../../Store/Actions/homeActions'\r\nimport { convertIconPath, existsInFavorites, findKeyByName } from '../../UtilityFunctions/functions'\r\nimport { getFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport CustomModal from '../Modal/customModal'\r\nimport JumbotronContent from '../Jumbotron/jumbotronContent'\r\nimport {debounce} from 'lodash';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\nclass Home extends Component {\r\n\r\n   \r\n    componentDidMount() {\r\n        for(let i = 1; i<=44; i++){\r\n            if(i!==9 && i!==10 && i!==27 && i!==28){\r\n                let img = new Image();\r\n                img.src = \"https://www.accuweather.com/images/weathericons/\" + convertIconPath(i) + \".svg\";        \r\n            }\r\n        }\r\n        const oldFavorites = getFavorites();\r\n        this.props.updateFavorites(oldFavorites);\r\n        if (this.props.firstTime) {  \r\n            this.props.firstLoad();\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    addToFavoritesHandler = () => {\r\n        if (!existsInFavorites(this.props.current, this.props.favorites)) {  \r\n            this.props.addToFavorites();\r\n        }\r\n        else {\r\n            this.props.removeFromFavorites(this.props.current.key);\r\n        }\r\n    }\r\n\r\n    changeHandlerDelay = debounce(event => {\r\n        this.props.changeHandler(event);\r\n    },500);\r\n    \r\n    render() {\r\n        if(this.props.loading){\r\n            return(\r\n                <Spinner animation=\"border\" className=\"spinner\"/>\r\n            );\r\n        }\r\n        return (\r\n            <div className={this.props.darkModeText}>\r\n\r\n                <section className=\"search\">\r\n                    <Dropdown\r\n                        className='icon search-dropdown-style'\r\n                        icon='world'\r\n                        button\r\n                        floating\r\n                        labeled\r\n                        options={this.props.searchArr}\r\n                        search\r\n                        placeholder=\"Enter City\"\r\n                        onSearchChange={(event)=> {\r\n                            event.persist();\r\n                            this.changeHandlerDelay(event)}}\r\n                        onChange={(event) => { this.props.submit(findKeyByName(event.currentTarget.textContent, this.props.searchArr), event.currentTarget.textContent.split(',')[0]) }}\r\n                    />\r\n                </section>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <JumbotronContent\r\n                        unit={this.props.unit}\r\n                        current={this.props.current}\r\n                        favorites={this.props.favorites}\r\n                        click={this.addToFavoritesHandler}\r\n                        darkModeText={this.props.darkModeText}\r\n                    />\r\n\r\n                </CSSTransitionGroup>\r\n\r\n\r\n                <CustomModal\r\n                    modalTitle={this.props.modalTitle}\r\n                    modalText={this.props.modalText}\r\n                    closeModal={this.props.closeModal}\r\n                    show={this.props.show}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {favorites,current,searchArr,firstTime,show,modalText,modalTitle, loading} = state.home; \r\n    const {unit,darkModeText} = state.navigation;\r\n    return {\r\n        favorites,\r\n        current,\r\n        firstTime,\r\n        show,\r\n        modalText,\r\n        modalTitle,\r\n        searchArr,\r\n        unit,\r\n        darkModeText,\r\n        loading\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateText: (val) => dispatch(homeActions.updateText(val)),\r\n        updateSearch: (arr) => dispatch(homeActions.updateSearch(arr)),\r\n        setCurrentCityDetails: (data, cityKey, cityName) => dispatch(homeActions.setCurrentCityDetails(data, cityKey, cityName)),\r\n        addToFavorites: () => dispatch(homeActions.addToFavorites()),\r\n        firstTimeFinished: () => dispatch(homeActions.firstTimeFinished()),\r\n        clearText: () => dispatch(generalActions.clear()),\r\n        removeFromFavorites: (key) => dispatch(homeActions.removeFromFavorites(key)),\r\n        closeModal: () => dispatch(homeActions.closeModal()),\r\n        openModal: (title, text) => dispatch(homeActions.openModal(title, text)),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n        submit: (cityKey, cityName) => dispatch(homeActions.submit(cityKey, cityName)),\r\n        changeHandler: (event) => dispatch(homeActions.changeHandler(event)),\r\n        firstLoad: () => dispatch(homeActions.firstLoad()),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { getFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport { arrayExists, convertTemp } from '../../UtilityFunctions/functions'\r\nimport { API_PATH } from '../../Constants/const'\r\nimport { updateFavorites,loading } from './actions'\r\nimport { store } from '../store'\r\n\r\n\r\nconst setFavoriteCityDetails = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_FAVORITE_CITY_DETAILS,\r\n        payload\r\n    }\r\n}\r\n\r\nconst firstTimeFinishedFavorites = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED_FAVORITES,\r\n    }\r\n}\r\n\r\nconst firstLoadFavorites = () => async dispatch => {\r\n    dispatch(loading());\r\n    const oldFavorites = getFavorites();\r\n    let requests = [];\r\n    if(arrayExists(oldFavorites)){\r\n        for (const favorite of oldFavorites) {\r\n            requests.push(\r\n                axios.all([axios.get('forecasts/v1/daily/5day/' + favorite.key + API_PATH),\r\n                axios.get('currentconditions/v1/' + favorite.key + API_PATH)])\r\n            )\r\n        }\r\n        const unit = store.getState().navigation.unit;\r\n        const response = await axios.all(requests);\r\n\r\n            for (let i = 0; i < response.length; i++) {\r\n                oldFavorites[i].fiveDaysForecast = unit === 'C' ? convertTemp(response[i][0].data.DailyForecasts) : response[i][0].data.DailyForecasts;\r\n                oldFavorites[i].currentStateOfWeather = response[i][1].data[0].WeatherText;\r\n                oldFavorites[i].currentTemp = unit === 'C' ? Math.floor(response[i][1].data[0].Temperature.Metric.Value) : Math.floor(response[i][1].data[0].Temperature.Imperial.Value);\r\n                oldFavorites[i].icon = response[i][1].data[0].WeatherIcon < 10 ? '0' + response[i][1].data[0].WeatherIcon : response[i][1].data[0].WeatherIcon;\r\n            }\r\n            dispatch(updateFavorites(oldFavorites));\r\n            dispatch(firstTimeFinishedFavorites());\r\n    }\r\n    \r\n}\r\n\r\nexport {\r\n    setFavoriteCityDetails,\r\n    firstTimeFinishedFavorites,\r\n    firstLoadFavorites\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../../App.scss'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as favoritesActions from '../../Store/Actions/favoritesActions'\r\nimport CardsList from '../CardsList/cardsList'\r\nimport { HOME_PATH } from '../../Constants/const'\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\nclass Favorites extends Component {\r\n\r\n    componentDidMount() {\r\n        if (this.props.firstTimeFavorites) {\r\n            this.props.firstLoadFavorites();\r\n        }\r\n    }\r\n\r\n    handleClickOnCard = (clickedFavorite) => {\r\n        this.props.history.push(HOME_PATH);\r\n        this.props.clearText();\r\n        this.props.setFavoriteCityDetails(clickedFavorite);\r\n\r\n    }\r\n\r\n    render() {\r\n        if(this.props.loading){\r\n            return(\r\n                <Spinner animation=\"border\" className=\"spinner\" />\r\n            );\r\n        }\r\n        return (\r\n            <div className={this.props.darkModeText}>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <CardsList\r\n                        click={(currentFavorite) => this.handleClickOnCard(currentFavorite)}\r\n                        unit={this.props.unit}\r\n                        favorites={this.props.favorites}\r\n                        darkModeText={this.props.darkModeText}\r\n                        isFav={true}\r\n                    />\r\n                </CSSTransitionGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favorites: state.home.favorites,\r\n        current: state.home.current,\r\n        unit: state.navigation.unit,\r\n        firstTimeFavorites: state.favorites.firstTimeFavorites,\r\n        darkModeText: state.navigation.darkModeText,\r\n        loading: state.home.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setFavoriteCityDetails: (clickedFavorite) => dispatch(favoritesActions.setFavoriteCityDetails(clickedFavorite)),\r\n        clearText: () => dispatch(generalActions.clear()),\r\n        firstTimeFinishedFavorites: () => dispatch(favoritesActions.firstTimeFinishedFavorites()),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n        firstLoadFavorites: () => dispatch(favoritesActions.firstLoadFavorites())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);","import React, { Component } from 'react';\r\nimport '../../App.scss';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as navigationBarActions from '../../Store/Actions/navigationBarActions'\r\nimport { existsInFavorites, convertFavoritesToCelsius, convertFavoritesToFahrenheit, convertFahrenheitToCelsius, convertCelsiusToFahrenheit, convertTemp } from '../../UtilityFunctions/functions';\r\nimport { HOME_PATH, FAVORITES_PATH } from '../../Constants/const'\r\n\r\n\r\nclass NavigationBar extends Component {\r\n    toggleHandle = () => {\r\n\r\n        const unit = this.props.unit;\r\n        let newUnit, currentNewTemp, newFavorites;\r\n        if (unit === 'C') {\r\n            newUnit = 'F';\r\n            currentNewTemp = convertCelsiusToFahrenheit(this.props.current.currentTemp);\r\n            newFavorites = convertFavoritesToFahrenheit();\r\n        }\r\n        else {\r\n            newUnit = 'C';\r\n            currentNewTemp = convertFahrenheitToCelsius(this.props.current.currentTemp);\r\n            newFavorites = convertFavoritesToCelsius();\r\n        }\r\n\r\n        if (!existsInFavorites(this.props.favorites, this.props.current)) {\r\n            this.props.toggle(\r\n                currentNewTemp,\r\n                newUnit,\r\n                convertTemp(this.props.current.fiveDaysForecast, unit)\r\n            );\r\n        }\r\n        this.props.updateFavorites(newFavorites);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Navbar collapseOnSelect expand=\"lg\" bg={this.props.darkMode ? \"light\" : \"dark\"} variant={this.props.darkMode ? \"light\" : \"dark\"} >\r\n                <Navbar.Brand as={Link} to={HOME_PATH}>Herolo Weather Task</Navbar.Brand>\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40' }}\r\n                    onClick={() => { this.toggleHandle() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    <span className={this.props.unit === 'C' ? 'active' : null}>°C </span>\r\n                    <span>/</span>\r\n                    <span className={this.props.unit === 'F' ? 'active' : null}> °F</span>\r\n                </Button>\r\n\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40', marginLeft: '10px' }}\r\n                    onClick={() => { this.props.toggleDarkMode() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    Dark Mode\r\n                </Button>\r\n\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link as={Link} to={HOME_PATH}>Home</Nav.Link>\r\n                        <Nav.Link as={Link} to={FAVORITES_PATH}>\r\n                            Favorites </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggle: (newTemp, newUnit, fiveDays) => dispatch(navigationBarActions.toggle(newTemp, newUnit, fiveDays)),\r\n        toggleDarkMode: () => dispatch(navigationBarActions.toggleDarkMode()),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        darkMode: state.navigation.darkmode,\r\n        unit: state.navigation.unit,\r\n        current: state.home.current,\r\n        favorites: state.home.favorites\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar);\r\n\r\n","import { actionTypes } from '../actionTypes'\r\n\r\nconst toggle = (newTemp, newUnit, fiveDays) => {\r\n    return {\r\n        type: actionTypes.TOGGLE,\r\n        unit: newUnit,\r\n        currentTemp: newTemp,\r\n        fiveDaysForecast: fiveDays\r\n    }\r\n}\r\n\r\nconst toggleDarkMode = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_DARK_MODE,\r\n    }\r\n}\r\n\r\nexport {\r\n    toggle,\r\n    toggleDarkMode\r\n}","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Home from './Components/Home/Home'\r\nimport Favorites from './Components/Favorites/Favorites'\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport NavigationBar from './Components/NavigationBar/NavigationBar'\r\nimport { HOME_PATH, FAVORITES_PATH } from './Constants/const'\r\n\r\n// const Home = React.lazy(()=> import('./Components/Home/Home'));\r\n// const Favorites = React.lazy(()=> import('./Components/Favorites/Favorites'));\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <BrowserRouter>\r\n          {/* <Suspense fallback={<p>Loading...</p>}> */}\r\n              <NavigationBar />\r\n              <Route path={HOME_PATH} exact component={Home} />\r\n              <Route path={FAVORITES_PATH} exact component={Favorites} />\r\n            {/* </Suspense> */}\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    \r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError(error) { \r\n      return { hasError: true };\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        return <h1>Something went wrong.</h1>; \r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { store } from './Store/store'\nimport axios from 'axios'\nimport ErrorBoundary from './Components/ErrorBoundary/ErrorBoundary';\n\naxios.defaults.baseURL = 'https://dataservice.accuweather.com/';\n\nReactDOM.render(\n  <ErrorBoundary>\n  <Provider store={store}>\n    <App />\n  </Provider> \n  </ErrorBoundary>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}