{"version":3,"sources":["Constants/const.js","Constants/actionTypes.js","Reducers/reducer.js","Constants/store.js","Utility Functions/functions.js","Actions/actions.js","Axios/axiosConfig.js","Components/Card/card.js","Components/Cards List/cardsList.js","Components/Home/Home.js","Components/FavoriteCard/favoriteCard.js","Components/FavoriteCard List/favoriteCardList.js","Components/Favorites/Favorites.js","Components/Navigation Bar/NavigationBar.js","App.js","index.js"],"names":["API_PATH","DAYS","actionTypes","initialState","favorites","current","searchText","searchArr","unit","firstTime","firstTimeFavorites","darkmode","show","modalTitle","modalText","reducer","state","action","type","val","arr","key","cityKey","cityName","currentTemp","currentStateOfWeather","fiveDaysForecast","icon","payload","Object","assign","title","text","store","createStore","convertCelsiusToFahrenheit","celsius","toFixed","convertFahrenheitToCelsius","fahrenheit","existsInFavorites","x","Array","isArray","length","undefined","find","favorite","forLoopconvertFahrenheitToCelsius","map","Temperature","Minimum","Value","Maximum","Unit","forLoopconvertCelsiusToFahrenheit","firstTimeFinished","clear","updateFavorites","localStorage","setItem","JSON","stringify","axiosConfig","axios","create","baseURL","card","props","Card","className","Body","Title","today","index","Text","currentDay","cardsList","Date","Home","errorLog","openModal","success","pos","crd","coords","get","latitude","longitude","then","data","submit","Key","EnglishName","catch","error","toString","changeHandler","event","updateText","target","value","response","i","LocalizedName","AdministrativeArea","Country","ID","updateSearch","split","all","setCurrentCityDetails","clearText","errors","addToFavoritesHandler","removeFromFavorites","addToFavorites","oldFavorites","parse","getItem","this","first","navigator","geolocation","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","darkMode","Dropdown","button","floating","labeled","options","search","placeholder","onSearchChange","onChange","name","city","findKeyByName","currentTarget","textContent","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","Jumbotron","Row","Col","xs","src","alt","Button","variant","onClick","getDay","Modal","onHide","closeModal","Header","closeButton","Footer","Component","connect","dispatch","actions","WeatherIcon","Math","floor","Metric","WeatherText","DailyForecasts","updateForecast","newFav","getState","push","newFavList","filter","favoriteCard","click","currentFavorite","favoriteCardList","Favorites","handleClickOnCard","clickedFavorite","history","setFavoriteCityDetails","requests","Promise","firstTimeFinishedFavorites","NavigationBar","toggleHandle","toggle","Navbar","collapseOnSelect","expand","bg","Brand","as","Link","to","style","backgroundColor","border","marginLeft","toggleDarkMode","Toggle","aria-controls","Collapse","id","Nav","newTemp","newUnit","fiveDays","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca9d0a29.chunk.js","sourcesContent":["export const ICON_PATH_1 = \"https://developer.accuweather.com/sites/default/files/\";\r\nexport const ICON_PATH_2 = \"-s.png\";\r\nexport const API_PATH = \"?apikey=eubH33xl3udPrlkaN4qNXhTGkbkYhpWD\";\r\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nexport const DEFAULT_CITY_KEY = \"215854\";\r\nexport const DEFAULT_CITY_NAME = 'Tel Aviv';","export const actionTypes = {\r\n    UPDATE_TEXT: 'UPDATE_TEXT',\r\n    UPDATE_SEARCH: 'UPDATE_SEARCH',\r\n    SET_CURRENT_CITY_DETAILS: 'SET_CURRENT_CITY_DETAILS',\r\n    TOGGLE: 'TOGGLE',\r\n    UPDATE_FORECAST: 'UPDATE_FORECAST',\r\n    ADD_TO_FAVORITES: 'ADD_TO_FAVORITES',\r\n    SET_FAVORITE_CITY_DETAILS: 'SET_FAVORITE_CITY_DETAILS',\r\n    FIRST_TIME_FINISHED: 'FIRST_TIME_FINISHED',\r\n    CLEAR: 'CLEAR',\r\n    REMOVE_FROM_FAVORITES: 'REMOVE_FROM_FAVORITES',\r\n    TOGGLE_DARK_MODE: 'TOGGLE_DARK_MODE',\r\n    CLOSE_MODAL: 'CLOSE_MODAL',\r\n    OPEN_MODAL: 'OPEN_MODAL',\r\n    UPDATE_FAVORITES: 'UPDATE_FAVORITES',\r\n    FIRST_TIME_FINISHED_FAVORITES: 'FIRST_TIME_FINISHED_FAVORITES',\r\n};\r\n\r\n","const initialState = {\r\n    favorites: [],\r\n    current: {},\r\n    searchText: '',\r\n    searchArr: [],\r\n    unit: 'C',\r\n    firstTime: true,\r\n    firstTimeFavorites: true,\r\n    darkmode: false,\r\n    show: false,\r\n    modalTitle: '',\r\n    modalText: '',\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    //switch statement \r\n    switch (action.type) {\r\n        case 'UPDATE_TEXT': //search text was updated\r\n            return {\r\n                ...state,\r\n                searchText: action.val\r\n            }\r\n        case 'UPDATE_SEARCH':\r\n            return {\r\n                ...state,\r\n                searchArr: action.arr\r\n            }\r\n        case 'SET_CURRENT_CITY_DETAILS':\r\n            return {\r\n                ...state,\r\n                current: {\r\n                    key: action.cityKey,\r\n                    cityName: action.cityName,\r\n                    currentTemp: action.currentTemp,\r\n                    currentStateOfWeather: action.currentStateOfWeather,\r\n                    fiveDaysForecast: action.fiveDaysForecast,\r\n                    icon: action.icon\r\n                },\r\n\r\n            }\r\n        case 'TOGGLE':\r\n            return {\r\n                ...state,\r\n                unit: action.unit,\r\n                current: {\r\n                    ...state.current,\r\n                    currentTemp: action.currentTemp,\r\n                    fiveDaysForecast: action.fiveDaysForecast\r\n                }\r\n            }\r\n        case 'UPDATE_FORECAST':\r\n            return {\r\n                ...state,\r\n                fiveDaysForecast: action.arr\r\n            }\r\n        case 'ADD_TO_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n\r\n        case 'SET_FAVORITE_CITY_DETAILS':\r\n            return {\r\n                ...state,\r\n                current: { ...action.payload }\r\n            }\r\n        case 'FIRST_TIME_FINISHED':\r\n            return {\r\n                ...state,\r\n                firstTime: false\r\n            }\r\n        case 'CLEAR':\r\n            return {\r\n                ...state,\r\n                searchArr: [],\r\n                searchText: ''\r\n            }\r\n        case 'REMOVE_FROM_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n        case 'TOGGLE_DARK_MODE':\r\n            return Object.assign({}, state, {\r\n                darkmode: !state.darkmode\r\n            });\r\n        case 'CLOSE_MODAL':\r\n            return {\r\n                ...state,\r\n                show: false\r\n            }\r\n        case 'OPEN_MODAL':\r\n            return {\r\n                ...state,\r\n                show: true,\r\n                modalTitle: action.title,\r\n                modalText: action.text\r\n            }\r\n\r\n        case 'UPDATE_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n\r\n        case 'FIRST_TIME_FINISHED_FAVORITES':\r\n            return {\r\n                ...state,\r\n                firstTimeFavorites: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import reducer from '../Reducers/reducer'\r\nimport { createStore } from 'redux';\r\n\r\nexport const store = createStore(reducer);\r\n","const convertCelsiusToFahrenheit = (celsius) => {\r\n    let fahrenheit = (celsius * 1.8) + 32;\r\n    return fahrenheit.toFixed(1);\r\n}\r\n\r\nconst convertFahrenheitToCelsius = (fahrenheit) => {\r\n    let celsius = (fahrenheit - 32) / 1.8;\r\n    return celsius.toFixed(1);\r\n}\r\n\r\nconst findKeyByName = (name, searchText) => {\r\n    const city = searchText.find(current => current.text === name);\r\n    if (city === undefined) //if clicked on the enter key\r\n        return searchText[0].key;\r\n    return city.key; //if clicked on a city with the mouse\r\n}\r\n\r\nconst existsInFavorites = (x, favorites) => {\r\n    if(!(Array.isArray(favorites) && favorites.length))\r\n        return false;\r\n    const found = favorites.find(favorite => x.key === favorite.key);\r\n    return found === undefined ? false : true;\r\n}\r\n\r\nconst forLoopconvertFahrenheitToCelsius = (arr) => {\r\n    arr.map((current) => {\r\n        current.Temperature.Minimum.Value = convertFahrenheitToCelsius(current.Temperature.Minimum.Value);\r\n        current.Temperature.Maximum.Value = convertFahrenheitToCelsius(current.Temperature.Maximum.Value);\r\n        current.Temperature.Minimum.Unit = 'C';\r\n        current.Temperature.Maximum.Unit = 'C';\r\n        return current;\r\n    });\r\n\r\n    return arr;\r\n}\r\n\r\nconst forLoopconvertCelsiusToFahrenheit = (arr) => {\r\n\r\n    arr.map((current) => {\r\n        current.Temperature.Minimum.Value = convertCelsiusToFahrenheit(current.Temperature.Minimum.Value);\r\n        current.Temperature.Maximum.Value = convertCelsiusToFahrenheit(current.Temperature.Maximum.Value);\r\n        current.Temperature.Minimum.Unit = 'F';\r\n        current.Temperature.Maximum.Unit = 'F';\r\n        return current;\r\n    });\r\n\r\n    return arr;\r\n}\r\n\r\n\r\nconst convertTemp = (arr, currentUnit) => {\r\n    let newArr = [...arr];\r\n    if (currentUnit === 'F') {\r\n        return forLoopconvertFahrenheitToCelsius(newArr);\r\n    }\r\n    else {\r\n        return forLoopconvertCelsiusToFahrenheit(newArr);\r\n    }\r\n}\r\n\r\nexport {\r\n    convertCelsiusToFahrenheit,\r\n    convertFahrenheitToCelsius,\r\n    existsInFavorites,\r\n    findKeyByName,\r\n    forLoopconvertCelsiusToFahrenheit,\r\n    forLoopconvertFahrenheitToCelsius,\r\n    convertTemp\r\n}\r\n\r\n","import { actionTypes } from '../Constants/actionTypes'\r\nimport { store } from '../Constants/store'\r\nimport { forLoopconvertFahrenheitToCelsius } from '../Utility Functions/functions'\r\n\r\nconst updateText = (val) => {\r\n    return {\r\n        type: actionTypes.UPDATE_TEXT,\r\n        val\r\n    }\r\n}\r\n\r\nconst updateSearch = (arr) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SEARCH,\r\n        arr\r\n    }\r\n}\r\n\r\nconst setCurrentCityDetails = (data, cityKey, cityName) => {\r\n    const icon = data[1].data[0].WeatherIcon < 10 ? '0' + data[1].data[0].WeatherIcon : data[1].data[0].WeatherIcon;\r\n    const currentTemp = Math.floor(data[1].data[0].Temperature.Metric.Value);\r\n    const currentStateOfWeather = data[1].data[0].WeatherText;\r\n    const fiveDaysForecast = forLoopconvertFahrenheitToCelsius(data[0].data.DailyForecasts);\r\n\r\n    return {\r\n        type: actionTypes.SET_CURRENT_CITY_DETAILS,\r\n        data,\r\n        cityKey,\r\n        cityName,\r\n        icon,\r\n        currentTemp,\r\n        currentStateOfWeather,\r\n        fiveDaysForecast\r\n    }\r\n}\r\n\r\n\r\nconst toggle = (newTemp, newUnit, fiveDays) => {\r\n    return {\r\n        type: actionTypes.TOGGLE,\r\n        unit: newUnit,\r\n        currentTemp: newTemp,\r\n        fiveDaysForecast: fiveDays\r\n    }\r\n}\r\n\r\n\r\nconst updateForecast = (arr) => {\r\n    return {\r\n        type: actionTypes.UPDATE_FORECAST,\r\n        arr\r\n    }\r\n}\r\n\r\nconst addToFavorites = () => {\r\n    const favorites = store.getState().favorites;\r\n    const current = store.getState().current;\r\n    let newFav;\r\n    if(!(Array.isArray(favorites) && favorites.length)){\r\n        newFav = [];\r\n        newFav.push(current);\r\n    }\r\n    else{\r\n        newFav = favorites.push(current);\r\n    }\r\n    localStorage.setItem('favorites', JSON.stringify(newFav));\r\n    return {\r\n        type: actionTypes.ADD_TO_FAVORITES,\r\n        favorites: newFav\r\n    }\r\n}\r\n\r\nconst setFavoriteCityDetails = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_FAVORITE_CITY_DETAILS,\r\n        payload\r\n    }\r\n}\r\n\r\nconst firstTimeFinished = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED,\r\n    }\r\n}\r\n\r\nconst clear = () => {\r\n    return {\r\n        type: actionTypes.CLEAR,\r\n    }\r\n}\r\nconst removeFromFavorites = (key) => {\r\n    const favoriteCities = store.getState().favorites;\r\n    const newFavList = favoriteCities.filter(city => city.key !== key);\r\n    localStorage.setItem('favorites', JSON.stringify(newFavList));\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_FAVORITES,\r\n        favorites: newFavList\r\n    }\r\n}\r\n\r\nconst toggleDarkMode = () => {\r\n    return {\r\n        type: actionTypes.TOGGLE_DARK_MODE,\r\n    }\r\n}\r\nconst closeModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_MODAL,\r\n    }\r\n}\r\n\r\nconst openModal = (title, text) => {\r\n    return {\r\n        type: actionTypes.OPEN_MODAL,\r\n        title,\r\n        text\r\n    }\r\n}\r\n\r\nconst updateFavorites = (favorites) => {\r\n    localStorage.setItem('favorites', JSON.stringify(favorites));\r\n    return {\r\n        type: actionTypes.UPDATE_FAVORITES,\r\n        favorites\r\n    }\r\n}\r\n\r\nconst firstTimeFinishedFavorites = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED_FAVORITES,\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    updateText,\r\n    updateSearch,\r\n    setCurrentCityDetails,\r\n    toggle,\r\n    updateForecast,\r\n    addToFavorites,\r\n    setFavoriteCityDetails,\r\n    firstTimeFinished,\r\n    clear,\r\n    removeFromFavorites,\r\n    toggleDarkMode,\r\n    closeModal,\r\n    openModal,\r\n    updateFavorites,\r\n    firstTimeFinishedFavorites\r\n}","import axios from 'axios'\r\n\r\nexport const axiosConfig = axios.create({\r\n    baseURL: 'https://dataservice.accuweather.com/'\r\n});  ","import React from 'react';\r\nimport { DAYS } from '../../Constants/const';\r\nimport { Card } from 'react-bootstrap';\r\nimport './card.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst card = (props) => {\r\n    return (\r\n        <Card className=\"col-xl-2 cards-style\" >\r\n            <Card.Body >\r\n                <Card.Title className=\"cards-title\">{DAYS[(props.today + props.index) % 7]}</Card.Title>\r\n                <br />\r\n                <Card.Text className=\"cards-text\">\r\n                    {props.currentDay.Temperature.Minimum.Value}  - {props.currentDay.Temperature.Maximum.Value} °{props.unit}\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport Card from '../Card/card'\r\n\r\nconst cardsList = (props) => {\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {(Array.isArray(props.current.fiveDaysForecast) && props.current.fiveDaysForecast.length) ? props.current.fiveDaysForecast.map((currentDay, index) => {\r\n                return <Card currentDay={currentDay}\r\n                    today={props.today}\r\n                    index={index}\r\n                    unit={props.unit}\r\n                    key={currentDay.Date} />\r\n            }\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default cardsList;\r\n","import React, { Component } from 'react'\r\nimport { Button, Jumbotron, Row, Col, Modal } from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios'\r\nimport { BsHeartFill, BsHeart } from 'react-icons/bs';\r\nimport './home.scss';\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport { ICON_PATH_1, ICON_PATH_2, API_PATH, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME } from '../../Constants/const'\r\nimport * as actions from '../../Actions/actions'\r\nimport { axiosConfig } from '../../Axios/axiosConfig'\r\nimport { existsInFavorites, findKeyByName } from '../../Utility Functions/functions'\r\nimport CardsList from '../Cards List/cardsList'\r\n\r\n\r\n\r\nclass Home extends Component {\r\n    componentDidMount() {\r\n        const oldFavorites = JSON.parse(localStorage.getItem('favorites'));\r\n        this.props.updateFavorites(oldFavorites);\r\n        if (this.props.first) {\r\n            axios.all([axiosConfig.get('forecasts/v1/daily/5day/' + DEFAULT_CITY_KEY + API_PATH),\r\n            axiosConfig.get('currentconditions/v1/' + DEFAULT_CITY_KEY + API_PATH)])\r\n                .then(data => {\r\n                    this.props.setCurrentCityDetails(data, DEFAULT_CITY_KEY, DEFAULT_CITY_NAME);\r\n                    this.props.firstTimeFinished();\r\n                }).then(() => {\r\n                    navigator.geolocation.getCurrentPosition(this.success, this.errorLog, {\r\n                        enableHighAccuracy: true,\r\n                        timeout: 5000,\r\n                        maximumAge: 0\r\n                    });\r\n                }).catch(error => this.props.openModal('Error', error.toString()));\r\n        }\r\n\r\n    }\r\n    errorLog = () => {\r\n        //show toast message\r\n        this.props.openModal('Note', 'Access denied to your location! No worries, we will use Tel Aviv as default.');\r\n    }\r\n\r\n\r\n    success = (pos) => {\r\n        let crd = pos.coords;\r\n        axiosConfig.get('locations/v1/cities/geoposition/search' + API_PATH + '&q='\r\n            + crd.latitude + '%2C' + crd.longitude).then(data => {\r\n                this.submit(data.data.Key, data.data.EnglishName);\r\n                this.props.firstTimeFinished();\r\n            }).catch(error => this.props.openModal('Error', error.toString()))\r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        this.props.updateText(event.target.value);\r\n        axiosConfig.get('locations/v1/cities/autocomplete' + API_PATH + '&q=' + event.target.value)\r\n            .then(response => {\r\n                let arr = [];\r\n                for (let i = 0; i < response.data.length; i++) {\r\n                    arr[i] = {\r\n                        key: response.data[i].Key,\r\n                        text: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n                        value: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n\r\n                    }\r\n                }\r\n                this.props.updateSearch(arr);\r\n            }\r\n            ).catch(error => this.props.openModal('Error', error.toString()));\r\n    }\r\n\r\n    submit = (cityKey = this.props.searchText[0].key, cityName = this.props.searchText[0].text.split(',')[0]) => {\r\n        axios.all([axiosConfig.get('forecasts/v1/daily/5day/' + cityKey + API_PATH),\r\n        axiosConfig.get('currentconditions/v1/' + cityKey + API_PATH)])\r\n            .then(data => {\r\n                this.props.setCurrentCityDetails(data, cityKey, cityName);\r\n                this.props.clearText();\r\n            }).catch(errors => this.props.openModal('Error', errors.toString()))\r\n    }\r\n\r\n    addToFavoritesHandler = () => {\r\n        if (!existsInFavorites(this.props.current, this.props.favorites)) {\r\n            this.props.addToFavorites();\r\n        }\r\n        else {\r\n            this.props.removeFromFavorites(this.props.current.key);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.darkMode ? 'dark' : 'light'}>\r\n\r\n                <section className=\"search\">\r\n                    <Dropdown\r\n                        className='icon search-dropdown-style'\r\n                        icon='world'\r\n                        button\r\n                        floating\r\n                        labeled\r\n                        options={this.props.searchText}\r\n                        search\r\n                        placeholder=\"Enter City\"\r\n                        onSearchChange={(event) => this.changeHandler(event)}\r\n                        onChange={(event) => { this.submit(findKeyByName(event.currentTarget.textContent, this.props.searchText), event.currentTarget.textContent.split(',')[0]) }}\r\n                    />\r\n                </section>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n                    <Jumbotron className={this.props.darkMode ? \"jumbotron-dark container\" : \"jumbotron-light container\"}>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={6} className=\"d-flex justify-content-start\">\r\n                                <section >\r\n                                    <h3 className={'DarkText'}>{this.props.current.cityName}</h3>\r\n                                    <h3 className={'DarkText'}>{this.props.current.currentTemp} °{this.props.unit}</h3>\r\n                                    <img src={ICON_PATH_1 + this.props.current.icon + ICON_PATH_2} alt=\"weather icon\"></img>\r\n                                </section>                        </Col>\r\n                            <Col xs={6} className=\"d-flex justify-content-end\">\r\n                                <section>\r\n                                    {existsInFavorites(this.props.current, this.props.favorites) ? <BsHeartFill className=\"icons\" /> : <BsHeart className=\"icons\" />}\r\n                                    <Button variant=\"dark\" className=\"add-to-favorites\" onClick={this.addToFavoritesHandler}>{existsInFavorites(this.props.current, this.props.favorites) ? 'Remove from favorites' : 'Add to favorites'}</Button>\r\n                                </section>\r\n                            </Col>\r\n                        </Row>\r\n                        <br /><br />\r\n                        <h1 className=\"dark-text state-of-weather\">{this.props.current.currentStateOfWeather}</h1>\r\n                        <br /><br /><br /> <br /><br />\r\n\r\n\r\n                        <CardsList\r\n                            current={this.props.current}\r\n                            today={new Date().getDay()}\r\n                            unit={this.props.unit}\r\n                        />\r\n\r\n                    </Jumbotron>\r\n\r\n                </CSSTransitionGroup>\r\n\r\n                <Modal show={this.props.show} onHide={this.props.closeModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{this.props.modalTitle}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>{this.props.modalText}</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.props.closeModal}>\r\n                            Close\r\n          </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favorites: state.favorites,\r\n        current: state.current,\r\n        text: state.searchText,\r\n        searchText: state.searchArr,\r\n        unit: state.unit,\r\n        first: state.firstTime,\r\n        darkMode: state.darkmode,\r\n        show: state.show,\r\n        modalText: state.modalText,\r\n        modalTitle: state.modalTitle\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateText: (val) => dispatch(actions.updateText(val)),\r\n        updateSearch: (arr) => dispatch(actions.updateSearch(arr)),\r\n        setCurrentCityDetails: (data, cityKey, cityName) => dispatch(actions.setCurrentCityDetails(data, cityKey, cityName)),\r\n        updateForecast: (arr) => dispatch(actions.updateForecast(arr)),\r\n        addToFavorites: () => dispatch(actions.addToFavorites()),\r\n        firstTimeFinished: () => dispatch(actions.firstTimeFinished()),\r\n        clearText: () => dispatch(actions.clear()),\r\n        removeFromFavorites: (key) => dispatch(actions.removeFromFavorites(key)),\r\n        closeModal: () => dispatch(actions.closeModal()),\r\n        openModal: (title, text) => dispatch(actions.openModal(title, text)),\r\n        updateFavorites: (favorites) => dispatch(actions.updateFavorites(favorites)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react'\r\nimport { Card } from 'react-bootstrap';\r\nimport './favoriteCard.scss'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst favoriteCard = (props) => {\r\n    return (\r\n        <Card className=\"col-xl-2 favorites-cards\" onClick={props.click}>\r\n            <Card.Body>\r\n                <Card.Title className=\"cards-text\">{props.currentFavorite.cityName}</Card.Title>\r\n                <Card.Text className=\"cards-text\">\r\n                    {props.currentTemp} °{props.unit}\r\n                    <br /><br />\r\n                    {props.currentFavorite.currentStateOfWeather}\r\n                    <br /><br /><br /><br />\r\n                </Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default favoriteCard;","import React from 'react'\r\nimport FavoriteCard from '../FavoriteCard/favoriteCard'\r\nimport { convertCelsiusToFahrenheit } from '../../Utility Functions/functions'\r\nimport './favoriteCardList.scss'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst favoriteCardList = (props) => {\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n                {(Array.isArray(props.favorites) && props.favorites.length) ? props.favorites.map(currentFavorite => {\r\n                    return <FavoriteCard\r\n                        key={currentFavorite.key}\r\n                        currentFavorite={currentFavorite}\r\n                        click={() => props.click(currentFavorite)}\r\n                        currentTemp={props.unit === 'F' ? convertCelsiusToFahrenheit(currentFavorite.currentTemp) : currentFavorite.currentTemp}\r\n                        unit={props.unit} />\r\n                }) :<h1 className={props.darkMode ? 'light-text no-favorites-h1' : 'dark-text no-favorites-h1'}>You don't have any favorites currently</h1>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default favoriteCardList;","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../../App.scss'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as actions from '../../Actions/actions'\r\nimport { axiosConfig } from '../../Axios/axiosConfig'\r\nimport axios from 'axios'\r\nimport { API_PATH } from '../../Constants/const'\r\nimport { forLoopconvertFahrenheitToCelsius } from '../../Utility Functions/functions'\r\nimport FavoriteCardList from '../FavoriteCard List/favoriteCardList'\r\n\r\nclass Favorites extends Component {\r\n\r\n    componentDidMount() {\r\n        const oldFavorites = JSON.parse(localStorage.getItem('favorites'));\r\n        let requests = [];\r\n        if (this.props.firstTimeFavorites) {\r\n            if (Array.isArray(oldFavorites) && oldFavorites.length) {\r\n                for (const favorite of oldFavorites) {\r\n                    requests.push(\r\n                        axios.all([axiosConfig.get('forecasts/v1/daily/5day/' + favorite.key + API_PATH),\r\n                        axiosConfig.get('currentconditions/v1/' + favorite.key + API_PATH)])\r\n                    )\r\n                }\r\n                Promise.all(requests).then((response) => {\r\n                    for (let i = 0; i < response.length; i++) {\r\n                        oldFavorites[i].fiveDaysForecast = this.props.unit === 'C' ? forLoopconvertFahrenheitToCelsius(response[i][0].data.DailyForecasts) : response[i][0].data.DailyForecasts;\r\n                        oldFavorites[i].currentStateOfWeather = response[i][1].data[0].WeatherText;\r\n                        oldFavorites[i].currentTemp = Math.floor(response[i][1].data[0].Temperature.Metric.Value);\r\n                        oldFavorites[i].icon = response[i][1].data[0].WeatherIcon < 10 ? '0' + response[i][1].data[0].WeatherIcon : response[i][1].data[0].WeatherIcon;\r\n                    }\r\n                    //at the end\r\n                    this.props.updateFavorites(oldFavorites);\r\n                    this.props.firstTimeFinishedFavorites();\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    handleClickOnCard = (clickedFavorite) => {\r\n        this.props.history.push('/aviv-kalmanson-23-9-2020');\r\n        this.props.clearText();\r\n        this.props.setFavoriteCityDetails(clickedFavorite);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.darkMode ? 'dark' : 'light'}>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <FavoriteCardList\r\n                        click={(currentFavorite) => this.handleClickOnCard(currentFavorite)}\r\n                        unit={this.props.unit}\r\n                        favorites={this.props.favorites}\r\n                        darkMode={this.props.darkMode}\r\n                    />\r\n                </CSSTransitionGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favorites: state.favorites,\r\n        current: state.current,\r\n        darkMode: state.darkmode,\r\n        unit: state.unit,\r\n        firstTimeFavorites: state.firstTimeFavorites\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setFavoriteCityDetails: (clickedFavorite) => dispatch(actions.setFavoriteCityDetails(clickedFavorite)),\r\n        firstTimeFinished: () => dispatch(actions.firstTimeFinished()),\r\n        clearText: () => dispatch(actions.clear()),\r\n        firstTimeFinishedFavorites: () => dispatch(actions.firstTimeFinishedFavorites()),\r\n        updateFavorites: (favorites) => dispatch(actions.updateFavorites(favorites)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);","import React, { Component } from 'react';\r\n// import './App.scss';\r\nimport { Link } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Navbar, Nav, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../../Actions/actions'\r\nimport { convertFahrenheitToCelsius, convertCelsiusToFahrenheit, forLoopconvertCelsiusToFahrenheit, forLoopconvertFahrenheitToCelsius } from '../../Utility Functions/functions';\r\n\r\n\r\nclass NavigationBar extends Component {\r\n\r\n    toggleHandle = () => {\r\n        if (this.props.unit === 'C') {\r\n            this.props.toggle(\r\n                convertCelsiusToFahrenheit(this.props.current.currentTemp),\r\n                'F',\r\n                forLoopconvertCelsiusToFahrenheit(this.props.current.fiveDaysForecast)\r\n            );\r\n        }\r\n        else {\r\n            this.props.toggle(\r\n                convertFahrenheitToCelsius(this.props.current.currentTemp),\r\n                'C',\r\n                forLoopconvertFahrenheitToCelsius(this.props.current.fiveDaysForecast)\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Navbar collapseOnSelect expand=\"lg\" bg={this.props.darkMode ? \"light\" : \"dark\"} variant={this.props.darkMode ? \"light\" : \"dark\"} >\r\n                <Navbar.Brand as={Link} to=\"/aviv-kalmanson-23-9-2020\">Herolo Weather Task</Navbar.Brand>\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40' }}\r\n                    onClick={() => { this.toggleHandle() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    °C / °F\r\n                </Button>\r\n\r\n                <Button\r\n                    style={{ backgroundColor: '#343A40', border: '1px solid #343A40', marginLeft: '10px' }}\r\n                    onClick={() => { this.props.toggleDarkMode() }}\r\n                    variant=\"secondary\"\r\n                >\r\n                    Dark Mode\r\n                </Button>\r\n\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link as={Link} to=\"/aviv-kalmanson-23-9-2020\">Home</Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/aviv-kalmanson-23-9-2020/favorites\">\r\n                            Favorites </Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggle: (newTemp, newUnit, fiveDays) => dispatch(actions.toggle(newTemp, newUnit, fiveDays)), //toggle C/F\r\n        toggleDarkMode: () => dispatch(actions.toggleDarkMode()) //TOGGLE DARK MODE\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        darkMode: state.darkmode,\r\n        unit: state.unit,\r\n        current: state.current\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar);\r\n\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Home from './Components/Home/Home'\nimport Favorites from './Components/Favorites/Favorites'\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport NavigationBar from './Components/Navigation Bar/NavigationBar'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <NavigationBar />\n          <Route path=\"/aviv-kalmanson-23-9-2020\" exact component={Home} />\n          <Route path=\"/aviv-kalmanson-23-9-2020/favorites\" exact component={Favorites} />\n        </BrowserRouter>\n      </div>\n    );\n  }\n\n}\n\n\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport {store} from './Constants/store'\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}