{"version":3,"sources":["Store/Actions/favoritesActions.js","Components/Card/card.js","Components/FavoriteCard/favoriteCard.js","Components/CardsList/cardsList.js","Store/Actions/searchActions.js","Components/Modal/customModal.js","Components/Jumbotron/jumbotronContent.js","Components/Home/Home.js"],"names":["setFavoriteCityDetails","payload","type","actionTypes","SET_FAVORITE_CITY_DETAILS","firstTimeFinishedFavorites","FIRST_TIME_FINISHED_FAVORITES","firstLoadFavorites","dispatch","a","loading","oldFavorites","getFavorites","requests","arrayExists","favorite","push","axios","all","get","key","API_PATH","unit","store","getState","home","response","i","length","fiveDaysForecast","CELSIUS","convertTemp","data","DailyForecasts","currentStateOfWeather","WeatherText","currentTemp","Math","floor","Temperature","Metric","Value","Imperial","icon","WeatherIcon","updateFavorites","finishedLoading","removeFromFavorites","newFavList","favorites","filter","city","setFavorites","REMOVE_FROM_FAVORITES","addToFavorites","current","newFav","concat","ADD_TO_FAVORITES","card","props","today","index","currentDay","Card","className","Body","Title","DAYS","Minimum","Maximum","src","ICON_PATH_1","convertIconPath","Day","Icon","ICON_PATH_2","alt","Night","favoriteCard","currentFavorite","cityName","click","onClick","as","NavLink","CardsList","isFav","map","darkModeText","Date","updateText","val","UPDATE_TEXT","updateSearch","arr","UPDATE_SEARCH","CustomModal","Modal","show","onHide","closeModal","Header","closeButton","modalTitle","modalText","Footer","Button","variant","jumbotronContent","undefined","Jumbotron","Row","Col","md","span","offset","existsInFavorites","getDay","Home","addToFavoritesHandler","changeHandlerDelay","debounce","event","changeHandler","Image","this","firstTime","firstLoad","Spinner","animation","Dropdown","button","floating","labeled","options","searchArr","search","placeholder","onSearchChange","persist","onChange","submit","findKeyByName","currentTarget","textContent","split","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","Component","connect","state","modal","searchActions","setCurrentCityDetails","cityKey","homeActions","favoriteActions","firstTimeFinished","clearText","generalActions","modalActions","openModal","title","text","target","value","Key","LocalizedName","AdministrativeArea","Country","ID","toString"],"mappings":"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","file":"static/js/5.c190fced.chunk.js","sourcesContent":["import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { getFavorites, setFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport { arrayExists, convertTemp } from '../../UtilityFunctions/functions'\r\nimport { API_PATH, CELSIUS } from '../../Constants/const'\r\nimport { updateFavorites,loading, finishedLoading } from './actions'\r\nimport { store } from '../store'\r\n\r\n\r\nconst setFavoriteCityDetails = (payload) => {\r\n    return {\r\n        type: actionTypes.SET_FAVORITE_CITY_DETAILS,\r\n        payload\r\n    }\r\n}\r\n\r\nconst firstTimeFinishedFavorites = () => {\r\n    return {\r\n        type: actionTypes.FIRST_TIME_FINISHED_FAVORITES,\r\n    }\r\n}\r\n\r\nconst firstLoadFavorites = () => async dispatch => {\r\n    dispatch(loading());\r\n    const oldFavorites = getFavorites();\r\n    let requests = [];\r\n    if(arrayExists(oldFavorites)){\r\n        for (const favorite of oldFavorites) {\r\n            requests.push(\r\n                axios.all([axios.get('forecasts/v1/daily/5day/' + favorite.key + API_PATH),\r\n                axios.get('currentconditions/v1/' + favorite.key + API_PATH)])\r\n            )\r\n        }\r\n        const unit = store.getState().home.unit;\r\n        const response = await axios.all(requests);\r\n\r\n            for (let i = 0; i < response.length; i++) {\r\n                oldFavorites[i].fiveDaysForecast = unit === CELSIUS ? convertTemp(response[i][0].data.DailyForecasts) : response[i][0].data.DailyForecasts;\r\n                oldFavorites[i].currentStateOfWeather = response[i][1].data[0].WeatherText;\r\n                oldFavorites[i].currentTemp = unit === CELSIUS ? Math.floor(response[i][1].data[0].Temperature.Metric.Value) : Math.floor(response[i][1].data[0].Temperature.Imperial.Value);\r\n                oldFavorites[i].icon = response[i][1].data[0].WeatherIcon < 10 ? '0' + response[i][1].data[0].WeatherIcon : response[i][1].data[0].WeatherIcon;\r\n            }\r\n            dispatch(updateFavorites(oldFavorites));\r\n            dispatch(firstTimeFinishedFavorites());\r\n    }\r\n    dispatch(finishedLoading());\r\n    \r\n}\r\n\r\nconst removeFromFavorites = (key) => {\r\n    const favoriteCities = store.getState().favorites.favorites;\r\n    const newFavList = favoriteCities.filter(city => city.key !== key);\r\n    setFavorites(newFavList);\r\n    return {\r\n        type: actionTypes.REMOVE_FROM_FAVORITES,\r\n        favorites: newFavList\r\n    }\r\n}\r\nconst addToFavorites = () => {\r\n    const favorites = getFavorites();\r\n    const current = store.getState().home.current;\r\n    let newFav = [];\r\n    if (!arrayExists(favorites)) {\r\n        newFav.push(current);\r\n    }\r\n    else {\r\n        newFav = favorites.concat(current);\r\n    }\r\n    setFavorites(newFav);\r\n    return {\r\n        type: actionTypes.ADD_TO_FAVORITES,\r\n        favorites: newFav\r\n    }\r\n}\r\n\r\nexport {\r\n    setFavoriteCityDetails,\r\n    firstTimeFinishedFavorites,\r\n    firstLoadFavorites,\r\n    addToFavorites,\r\n    removeFromFavorites\r\n}","import React from 'react';\r\nimport { DAYS } from '../../Constants/const';\r\nimport { Card } from 'react-bootstrap';\r\nimport './card.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport { convertIconPath } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst card = (props) => {\r\n    const {today,index,currentDay,unit} = props;\r\n    return (\r\n        <Card className=\"col-xl-2 cards-style\">\r\n            <Card.Body>\r\n                <Card.Title className=\"cards-title\">{DAYS[(today + index) % 7]}</Card.Title>\r\n                <div className=\"cards-text card-margin\">\r\n                    {currentDay.Temperature.Minimum.Value}  - {currentDay.Temperature.Maximum.Value} °{unit}\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                        <span className=\"d-flex justify-content-start span-width\">Day:</span>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${convertIconPath(currentDay.Day.Icon)}${ICON_PATH_2}`} alt=\"weather icon day\"></img>\r\n                    </div>\r\n                    <div className=\"row icons-day-night justify-content-center\">\r\n                    <span className=\"d-flex justify-content-start span-width\">Night:</span>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${convertIconPath(currentDay.Night.Icon)}${ICON_PATH_2}`} alt=\"weather icon night\"></img>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\ncard.propTypes = {\r\n    currentDay: propTypes.object,\r\n    unit: propTypes.string,\r\n    index: propTypes.number,\r\n    today: propTypes.number \r\n}\r\n\r\nexport default card;","import React from 'react'\r\nimport { Card, NavLink } from 'react-bootstrap';\r\nimport './favoriteCard.scss';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\n\r\nconst favoriteCard = (props) => {\r\n    const {currentTemp,cityName,currentStateOfWeather, icon} = props.currentFavorite;\r\n    const {click,unit} = props;\r\n    return(\r\n        <Card className=\"col-lg-2 favorites-cards\" onClick={click} as={NavLink}>\r\n                <Card.Body>\r\n                    <Card.Title className=\"cards-text\">{cityName}</Card.Title>\r\n                    <div className=\"cards-text\">\r\n                        {currentTemp} °{unit}\r\n                        <div className=\"current-state\" >\r\n                            {currentStateOfWeather}\r\n                        </div>\r\n                        <div className=\"image\">\r\n                            <img className=\"icons-images\" src={`${ICON_PATH_1}${icon}${ICON_PATH_2}`} alt=\"weather icon day\"></img>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n    );\r\n}\r\n\r\n\r\nfavoriteCard.propTypes = {\r\n    currentFavorite: propTypes.object,\r\n    unit: propTypes.string,\r\n    click: propTypes.func,\r\n}\r\n\r\nexport default favoriteCard;","import React from 'react'\r\nimport Card from '../Card/card'\r\nimport FavoriteCard from '../FavoriteCard/favoriteCard'\r\nimport './cardsList.scss'\r\nimport { arrayExists } from '../../UtilityFunctions/functions'\r\nimport propTypes from 'prop-types';\r\n\r\nconst CardsList = (props) => {\r\n    const {favorites,click,today,current, unit} = props;\r\n    if (props.isFav) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {arrayExists(favorites) ? favorites.map(currentFavorite => {\r\n                        return <FavoriteCard\r\n                            key={currentFavorite.key}\r\n                            currentFavorite={currentFavorite}\r\n                            click={() => click(currentFavorite)}\r\n                            currentTemp={currentFavorite.currentTemp}\r\n                            unit={unit}/>\r\n                    }) : <h1 className={`text-${props.darkModeText}-mode-active no-favorites-h1`}>You don't have any favorites currently</h1>}\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {arrayExists(current.fiveDaysForecast) && current.fiveDaysForecast.map((currentDay, index) => {\r\n                return <Card currentDay={currentDay}\r\n                    today={today}\r\n                    index={index}\r\n                    unit={unit}\r\n                    key={currentDay.Date}\r\n                    />\r\n            }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nCardsList.propTypes = {\r\n    unit: propTypes.string,\r\n    current: propTypes.object,\r\n    favorites: propTypes.array,\r\n    click: propTypes.func,\r\n    darkModeText: propTypes.string,\r\n    isFav: propTypes.bool,\r\n    today: propTypes.number\r\n}\r\n\r\nexport default CardsList;\r\n","import { actionTypes } from '../actionTypes'\r\nimport axios from 'axios'\r\nimport { API_PATH } from '../../Constants/const'\r\nimport {openModal} from './modalActions'\r\nconst updateText = (val) => {\r\n    return {\r\n        type: actionTypes.UPDATE_TEXT,\r\n        val\r\n    }\r\n}\r\n\r\nconst updateSearch = (arr) => {\r\n    return {\r\n        type: actionTypes.UPDATE_SEARCH,\r\n        arr\r\n    }\r\n}\r\n\r\nconst changeHandler = (event) => async dispatch => {\r\n    try{\r\n        dispatch(updateText(event.target.value));\r\n        const response =  await axios.get('locations/v1/cities/autocomplete' + API_PATH + '&q=' + event.target.value)    \r\n        let arr = [];\r\n        for (let i = 0; i < response.data.length; i++) {\r\n            arr[i] = {\r\n                key: response.data[i].Key,\r\n                text: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n                value: response.data[i].LocalizedName + ',' + response.data[i].AdministrativeArea.LocalizedName + ',' + response.data[i].Country.ID,\r\n    \r\n            }\r\n        }\r\n        dispatch(updateSearch(arr));\r\n    }\r\n    catch(error){\r\n        dispatch(openModal('Error', error.toString()));\r\n    }\r\n}\r\n\r\nexport {\r\n    updateText,\r\n    updateSearch,\r\n    changeHandler\r\n}\r\n\r\n","import React from 'react'\r\nimport propTypes from 'prop-types';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nconst CustomModal = (props) => {\r\n\r\n    return (\r\n        <Modal show={props.show} onHide={props.closeModal}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{props.modalTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>{props.modalText}</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.closeModal}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n}\r\n\r\nCustomModal.propTypes = {\r\n    modalTitle: propTypes.string,\r\n    modalText: propTypes.string,\r\n    closeModal: propTypes.func,\r\n    show: propTypes.bool,\r\n}\r\n\r\nexport default CustomModal;","import React from 'react';\r\nimport { ICON_PATH_1, ICON_PATH_2 } from '../../Constants/const';\r\nimport { BsHeartFill, BsHeart } from 'react-icons/bs';\r\nimport { Button, Jumbotron, Row, Col } from 'react-bootstrap';\r\nimport CardsList from '../CardsList/cardsList';\r\nimport { existsInFavorites } from '../../UtilityFunctions/functions'\r\nimport './Jumbotron.scss'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\n\r\nconst jumbotronContent = (props) => {\r\n    const {darkModeText,current,favorites,click,unit} = props;\r\n    if(current.icon === undefined){\r\n        return(<div></div>)\r\n    }\r\n    return (\r\n        <Jumbotron className={`jumbotron-${darkModeText} container fluid`}>\r\n            <Row className=\"show-grid\">\r\n                <Col md={{ span: 6, offset: 3 }} className=\"justify-content-center\">\r\n                    <section >\r\n                        <h2 className=\"city-details\">{current.cityName}</h2>\r\n                        <h2 className=\"city-details\">{current.currentTemp} °{unit}</h2>\r\n                        <img className=\"icons-images\" src={`${ICON_PATH_1}${current.icon}${ICON_PATH_2}`} alt=\"weather icon\"></img>\r\n                    </section>                        </Col>\r\n                <Col md={3} className=\"d-flex justify-content-center\">\r\n                    <section>\r\n                        {existsInFavorites(current, favorites) ? <BsHeartFill className=\"icons\" onClick={click}/>  : <BsHeart className=\"icons\" onClick={click}/>}\r\n                        <Button variant=\"dark\" className=\"add-to-favorites\" onClick={click}>{existsInFavorites(current, favorites) ? 'Remove from favorites' : 'Add to favorites'}</Button>\r\n                    </section>\r\n                </Col>\r\n            </Row>\r\n            <h1 className=\"dark-text state-of-weather\">{current.currentStateOfWeather}</h1>\r\n            <div className=\"cards-list-home\">\r\n                <CardsList\r\n                    current={current}\r\n                    today={new Date().getDay()}\r\n                    unit={unit}\r\n                    isFav={false}\r\n                />\r\n\r\n            </div>\r\n\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\njumbotronContent.propTypes = {\r\n    unit: propTypes.string,\r\n    current: propTypes.object,\r\n    favorites: propTypes.array,\r\n    click: propTypes.func,\r\n    darkModeText: propTypes.string\r\n}\r\n\r\nexport default jumbotronContent;\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport './home.scss';\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport * as generalActions from '../../Store/Actions/actions'\r\nimport * as homeActions from '../../Store/Actions/homeActions'\r\nimport * as searchActions from '../../Store/Actions/searchActions'\r\nimport * as favoriteActions from '../../Store/Actions/favoritesActions'\r\nimport * as modalActions from '../../Store/Actions/modalActions'\r\nimport { convertIconPath, existsInFavorites, findKeyByName } from '../../UtilityFunctions/functions'\r\nimport { getFavorites } from '../../UtilityFunctions/localStorageFunctions'\r\nimport CustomModal from '../Modal/customModal'\r\nimport JumbotronContent from '../Jumbotron/jumbotronContent'\r\nimport {debounce} from 'lodash';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\nclass Home extends Component {\r\n\r\n   \r\n    componentDidMount() {\r\n        for(let i = 1; i<=44; i++){\r\n            if(i!==9 && i!==10 && i!==27 && i!==28){\r\n                let img = new Image();\r\n                img.src = \"https://www.accuweather.com/images/weathericons/\" + convertIconPath(i) + \".svg\";        \r\n            }\r\n        }\r\n        const oldFavorites = getFavorites();\r\n        this.props.updateFavorites(oldFavorites);\r\n        if (this.props.firstTime) {  \r\n            this.props.firstLoad();\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    addToFavoritesHandler = () => {\r\n        if (!existsInFavorites(this.props.current, this.props.favorites)) {  \r\n            this.props.addToFavorites();\r\n        }\r\n        else {\r\n            this.props.removeFromFavorites(this.props.current.key);\r\n        }\r\n    }\r\n\r\n    changeHandlerDelay = debounce(event => {\r\n        this.props.changeHandler(event);\r\n    },500);\r\n    \r\n    render() {\r\n        if(this.props.loading){\r\n            return(\r\n                <Spinner animation=\"border\" className=\"spinner\"/>\r\n            );\r\n        }\r\n        return (\r\n            <div className={this.props.darkModeText}>\r\n\r\n                <section className=\"search\">\r\n                    <Dropdown\r\n                        className='icon search-dropdown-style'\r\n                        icon='world'\r\n                        button\r\n                        floating\r\n                        labeled\r\n                        options={this.props.searchArr}\r\n                        search\r\n                        placeholder=\"Enter City\"\r\n                        onSearchChange={(event)=> {\r\n                            event.persist();\r\n                            this.changeHandlerDelay(event)}}\r\n                        onChange={(event) => { this.props.submit(findKeyByName(event.currentTarget.textContent, this.props.searchArr), event.currentTarget.textContent.split(',')[0]) }}\r\n                    />\r\n                </section>\r\n                <CSSTransitionGroup transitionName=\"cards\"\r\n                    transitionAppear={true}\r\n                    transitionAppearTimeout={1000}\r\n                    transitionEnterTimeout={1000}\r\n                    transitionLeaveTimeout={1000}>\r\n\r\n                    <JumbotronContent\r\n                        unit={this.props.unit}\r\n                        current={this.props.current}\r\n                        favorites={this.props.favorites}\r\n                        click={this.addToFavoritesHandler}\r\n                        darkModeText={this.props.darkModeText}\r\n                    />\r\n\r\n                </CSSTransitionGroup>\r\n\r\n\r\n                <CustomModal\r\n                    modalTitle={this.props.modalTitle}\r\n                    modalText={this.props.modalText}\r\n                    closeModal={this.props.closeModal}\r\n                    show={this.props.show}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const {current,firstTime, unit,darkModeText} = state.home; \r\n    const {modalTitle, modalText, show} = state.modal;\r\n    const {searchArr} = state.search;\r\n    const {favorites} = state.favorites;\r\n    const {loading} = state.loading;\r\n    return {\r\n        favorites,\r\n        current,\r\n        firstTime,\r\n        show,\r\n        modalText,\r\n        modalTitle,\r\n        searchArr,\r\n        unit,\r\n        darkModeText,\r\n        loading\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateText: (val) => dispatch(searchActions.updateText(val)),\r\n        updateSearch: (arr) => dispatch(searchActions.updateSearch(arr)),\r\n        setCurrentCityDetails: (data, cityKey, cityName) => dispatch(homeActions.setCurrentCityDetails(data, cityKey, cityName)),\r\n        addToFavorites: () => dispatch(favoriteActions.addToFavorites()),\r\n        firstTimeFinished: () => dispatch(homeActions.firstTimeFinished()),\r\n        clearText: () => dispatch(generalActions.clear()),\r\n        removeFromFavorites: (key) => dispatch(favoriteActions.removeFromFavorites(key)),\r\n        closeModal: () => dispatch(modalActions.closeModal()),\r\n        openModal: (title, text) => dispatch(modalActions.openModal(title, text)),\r\n        updateFavorites: (favorites) => dispatch(generalActions.updateFavorites(favorites)),\r\n        submit: (cityKey, cityName) => dispatch(homeActions.submit(cityKey, cityName)),\r\n        changeHandler: (event) => dispatch(searchActions.changeHandler(event)),\r\n        firstLoad: () => dispatch(homeActions.firstLoad()),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);"],"sourceRoot":""}